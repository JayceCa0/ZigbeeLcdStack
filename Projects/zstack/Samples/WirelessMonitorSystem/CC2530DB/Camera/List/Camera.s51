///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        13/Jul/2015  17:23:40 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\Source\Cam /
//                          era.c                                             /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"          /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\T /
//                          ools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO         /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=500        /
//                          -DQUEUED_POLL_RATE=30 -DRESPONSE_POLL_RATE=100)   /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\Source\Camera.c"    /
//                          -D HAL_UART -lC "C:\Texas                         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\Camera\Lis /
//                          t\" -lA "C:\Texas Instruments\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Samples\WirelessMonitorSystem\C /
//                          C2530DB\Camera\List\" --diag_suppress             /
//                          Pe001,Pa010 -o "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\Camera\Obj /
//                          \" -e --no_cse --no_unroll --no_inline            /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\" -I       /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\Source\" -I "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\Z /
//                          Main\TI2530DB\" -I "C:\Texas                      /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\include\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\target\CC2530EB\" -I          /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\include\" -I        /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\low_level\srf04\"   /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\..\..\Components\mac\low_level\srf04\ /
//                          single_chip\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\mt\" -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\osal\include\" -I "C:\Texas       /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\saddr\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\sdata\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\af\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\nwk\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sapi\" -I "C:\Texas         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sec\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sys\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\zdo\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\" -I "C:\Texas               /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\" -On                    /
//                          --require_prototypes                              /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\CC2530DB\C /
//                          amera\List\Camera.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Camera

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Camera_CalcFCS?relay,0203H
        FUNCTION ??Camera_MessageMSGCB?relay,0203H
        FUNCTION ??Camera_SendClearCMD?relay,0203H
        FUNCTION ??Camera_SendCommand?relay,0203H
        FUNCTION ??Camera_SendDataCMD?relay,0203H
        FUNCTION ??Camera_SendImageData?relay,0203H
        FUNCTION ??Camera_SendImageStartFrame?relay,0203H
        FUNCTION ??Camera_SendLengthCMD?relay,0203H
        FUNCTION ??Camera_SendResetCMD?relay,0203H
        FUNCTION ??Camera_SendShutCMD?relay,0203H
        FUNCTION ??Camera_SendTopoInformation?relay,0203H
        FUNCTION ??Camera_ToolTimesOfEight?relay,0203H
        FUNCTION ??Camera_UartCallBack?relay,0203H
        FUNCTION ??Camera_UartInit?relay,0203H
        FUNCTION ??Camera_UartInterface?relay,0203H
        PUBLIC ??WirelessMonitorSystem_Init?relay
        FUNCTION ??WirelessMonitorSystem_Init?relay,0203H
        PUBLIC ??WirelessMonitorSystem_ProcessEvent?relay
        FUNCTION ??WirelessMonitorSystem_ProcessEvent?relay,0203H
        FUNCTION ??copyExtAddr?relay,0203H
        FUNCTION Camera_CalcFCS,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Camera_ClusterInList
        PUBLIC Camera_ClusterOutList
        PUBLIC Camera_DstAddr
        FUNCTION Camera_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Camera_NwkState
        FUNCTION Camera_SendClearCMD,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Camera_SendCommand,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Camera_SendDataCMD,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION Camera_SendImageData,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION Camera_SendImageStartFrame,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION Camera_SendLengthCMD,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Camera_SendResetCMD,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Camera_SendShutCMD,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION Camera_SendTopoInformation,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC Camera_SimpleDesc
        PUBLIC Camera_TaskID
        FUNCTION Camera_ToolTimesOfEight,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Camera_TransID
        FUNCTION Camera_UartCallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION Camera_UartInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION Camera_UartInterface,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Camera_epDesc
        PUBLIC WirelessMonitorSystem_Init
        FUNCTION WirelessMonitorSystem_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WirelessMonitorSystem_ProcessEvent
        FUNCTION WirelessMonitorSystem_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC cameraState
        PUBLIC clear
        PUBLIC clear_ack
        FUNCTION copyExtAddr,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC currentAddr
        PUBLIC currentRead
        PUBLIC data_end
        PUBLIC data_pre
        PUBLIC imageLength
        PUBLIC length
        PUBLIC length_ack
        PUBLIC maxTransmitDataLen
        PUBLIC mtu
        PUBLIC parAddr
        PUBLIC reset
        PUBLIC reset_ack
        PUBLIC shut
        PUBLIC shut_ack
        PUBLIC srcAddr
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
afDataReqMTU        SYMBOL "afDataReqMTU"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_memset         SYMBOL "osal_memset"
osal_memcpy         SYMBOL "osal_memcpy"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
HalUARTOpen         SYMBOL "HalUARTOpen"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
HalUARTWrite        SYMBOL "HalUARTWrite"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
WirelessMonitorSystem_Init SYMBOL "WirelessMonitorSystem_Init"
??WirelessMonitorSystem_Init?relay SYMBOL "?relay", WirelessMonitorSystem_Init
WirelessMonitorSystem_ProcessEvent SYMBOL "WirelessMonitorSystem_ProcessEvent"
??WirelessMonitorSystem_ProcessEvent?relay SYMBOL "?relay", WirelessMonitorSystem_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afDataReqMTU
        FUNCTION afDataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\WirelessMonitorSystem\Source\Camera.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 
//   10 #include "WirelessMonitorSystem.h"
//   11 #include "DebugTrace.h"
//   12 
//   13 #if !defined( WIN32 )
//   14   #include "OnBoard.h"
//   15 #endif
//   16 
//   17 /* HAL */
//   18 #include "hal_uart.h"
//   19 
//   20 /*********************************************************************
//   21  * MACROS
//   22  */
//   23 // Cluster number for Camera
//   24 #define CAMERA_MAX_IN_CLUSTERS 	2
//   25 #define CAMERA_MAX_OUT_CLUSTERS	3
//   26 
//   27 // Camera Read Step
//   28 // you don't need to set the camera
//   29 #define	CAMERA_RESET		1
//   30 
//   31 #define CAMERA_CLEAR		2
//   32 #define CAMERA_SHUT			3
//   33 #define CAMERA_RECEIVE_LEN	4
//   34 #define CAMERA_SEND_DATA	5
//   35 
//   36 // EVENT LIST
//   37 #define CAMERA_IMAGE_READ_EVT			0x0002
//   38 #define CAMERA_INIT_EVT					0x0004
//   39 
//   40 
//   41 // Image Send Delay
//   42 // the coordinator needs 11 ms to send the data to the monitor
//   43 #define CAMERA_SEND_DELAY    1
//   44 
//   45 /*********************************************************************
//   46  * CONSTANTS
//   47  */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   48 const byte reset[] = {0x56, 0x00, 0x26, 0x00};
reset:
        DATA8
        DB 86
        DB 0
        DB 38
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   49 const byte reset_ack[] = {0x76, 0x00, 0x26, 0x00};
reset_ack:
        DATA8
        DB 118
        DB 0
        DB 38
        DB 0
//   50 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   51 const byte clear[] = {0x56, 0x00, 0x36, 0x01, 0x02};
clear:
        DB 86
        DB 0
        DB 54
        DB 1
        DB 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   52 const byte clear_ack[] = {0x76, 0x00, 0x36, 0x00, 0x00};
clear_ack:
        DB 118
        DB 0
        DB 54
        DB 0
        DB 0
//   53 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   54 const byte shut[] = {0x56, 0x00, 0x36, 0x01, 0x00};
shut:
        DB 86
        DB 0
        DB 54
        DB 1
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   55 const byte shut_ack[] = {0x76, 0x00, 0x36, 0x00, 0x00};
shut_ack:
        DB 118
        DB 0
        DB 54
        DB 0
        DB 0
//   56 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   57 const byte length[] = {0x56, 0x00, 0x34, 0x01, 0x00};
length:
        DB 86
        DB 0
        DB 52
        DB 1
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   58 const byte length_ack[] = {0x76, 0x00, 0x34, 0x00, 0x04, 0x00, 0x00};
length_ack:
        DB 118
        DB 0
        DB 52
        DB 0
        DB 4
        DB 0
        DB 0
//   59 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   60 const byte data_pre[] = {0x56, 0x00, 0x32, 0x0C, 0x00, 0x0A};
data_pre:
        DB 86
        DB 0
        DB 50
        DB 12
        DB 0
        DB 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   61 const byte data_end[] = {0x00, 0x00}; 
data_end:
        DATA8
        DB 0
        DB 0
//   62 
//   63 /*********************************************************************
//   64  * TYPEDEFS
//   65  */
//   66 
//   67 /*********************************************************************
//   68  * GLOBAL VARIABLES
//   69  */
//   70 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   71 const cId_t Camera_ClusterInList[CAMERA_MAX_IN_CLUSTERS] =
Camera_ClusterInList:
        DATA16
        DW 10
        DW 12
//   72 {
//   73 	TOPO_REQ,
//   74 	IMAGE_REQ
//   75 };
//   76 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   77 const cId_t Camera_ClusterOutList[CAMERA_MAX_OUT_CLUSTERS] =
Camera_ClusterOutList:
        DATA16
        DW 11
        DW 7
        DW 8
//   78 {
//   79   ZIGBEE_COMMON_CLUSTER,
//   80   CAMERA_START_CMD,
//   81   CAMERA_DATA_CMD
//   82 };
//   83 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   84 const SimpleDescriptionFormat_t Camera_SimpleDesc =
Camera_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW Camera_ClusterInList
        DATA8
        DB 3
        DATA16
        DW Camera_ClusterOutList
//   85 {
//   86   Monitor_ENDPOINT,              //  int Endpoint;
//   87   Monitor_PROFID,                //  uint16 AppProfId[2];
//   88   Monitor_DEVICEID,              //  uint16 AppDeviceId[2];
//   89   Monitor_DEVICE_VERSION,        //  int   AppDevVer:4;
//   90   Monitor_FLAGS,                 //  int   AppFlags:4;
//   91   CAMERA_MAX_IN_CLUSTERS,           //  byte  AppNumInClusters;
//   92   (cId_t *)Camera_ClusterInList,    //  byte *pAppInClusterList;
//   93   CAMERA_MAX_OUT_CLUSTERS,          //  byte  AppNumOutClusters;
//   94   (cId_t *)Camera_ClusterOutList    //  byte *pAppOutClusterList;
//   95 };
//   96 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 endPointDesc_t Camera_epDesc;
Camera_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   98 
//   99 /*********************************************************************
//  100  * EXTERNAL VARIABLES
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * EXTERNAL FUNCTIONS
//  105  */
//  106 
//  107 /*********************************************************************
//  108  * LOCAL VARIABLES
//  109  */
//  110 /**************************** OSAL *********************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte Camera_TaskID;    // Task ID for internal task/event processing
Camera_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  112 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 byte Camera_TransID;  // This is the unique message ID (counter)
Camera_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  114 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  115 devStates_t Camera_NwkState;
Camera_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 afAddrType_t Camera_DstAddr;	// Bind endpoint address
Camera_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  118 
//  119 /************************** Camera *********************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  120 byte cameraState;	
cameraState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  121 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 byte maxTransmitDataLen;
maxTransmitDataLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  123 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  124 uint16	imageLength;
imageLength:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  125 uint16 	currentRead;
currentRead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  126 uint16  currentAddr;
currentAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  127 
//  128 // Get the Max output

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  129 afDataReqMTU_t mtu;
mtu:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  130 
//  131 /*************************** AF *******************************/
//  132 // address for the current node

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  133 uint16 srcAddr;
srcAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  134 uint16 parAddr;
parAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  135 /*********************************************************************
//  136  * LOCAL FUNCTIONS
//  137  */
//  138 static void Camera_UartInit( void );
//  139 static void Camera_UartCallBack( uint8 port, uint8 event );
//  140 static void Camera_SendImageData( byte* buffer, byte len );
//  141 static void Camera_SendTopoInformation( void );
//  142 static void Camera_SendImageStartFrame( void );
//  143 static byte Camera_CalcFCS( uint8 *msg_ptr, uint8 len );
//  144 static void copyExtAddr(byte* src, byte* dst);
//  145 static void Camera_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  146 
//  147 static void Camera_SendResetCMD( void );
//  148 static void Camera_SendClearCMD( void );
//  149 static void Camera_SendShutCMD( void );
//  150 static void Camera_SendLengthCMD( void );
//  151 static void Camera_SendDataCMD(uint16 startAddr, uint16 len);
//  152 
//  153 static void Camera_SendCommand( void );
//  154 static void Camera_UartInterface( void );
//  155 static uint16 Camera_ToolTimesOfEight(uint16 addr);
//  156 
//  157 /*********************************************************************
//  158  * @fn      Camera_Init
//  159  *
//  160  * @brief   Initialization function for the Sensor App Task.
//  161  *          This is called during initialization and should contain
//  162  *          any application specific initialization (ie. hardware
//  163  *          initialization/setup, table initialization, power up
//  164  *          notificaiton ... ).
//  165  *
//  166  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  167  *                    used to send messages and set timers.
//  168  *
//  169  * @return  none
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 void WirelessMonitorSystem_Init( uint8 task_id )
WirelessMonitorSystem_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function WirelessMonitorSystem_Init
        CODE
//  172 {
        FUNCALL WirelessMonitorSystem_Init, Camera_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_Init, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  173   // Init the Stack
//  174   Camera_TaskID = task_id;
        MOV     DPTR,#Camera_TaskID
        MOVX    @DPTR,A
//  175   Camera_NwkState = DEV_INIT;
        MOV     DPTR,#Camera_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  176   Camera_TransID = 0;
        MOV     DPTR,#Camera_TransID
        MOV     A,#0x0
        MOVX    @DPTR,A
//  177   
//  178   // init the state and len
//  179   cameraState = CAMERA_RESET;	// reset mode
        MOV     DPTR,#cameraState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  180   imageLength = 0;
        MOV     DPTR,#imageLength
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  181   currentRead = 0;
        MOV     DPTR,#currentRead
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  182   currentAddr = 0;
        MOV     DPTR,#currentAddr
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  183 
//  184   // init the camera uart
//  185   Camera_UartInit();
        ; Setup parameters for call to function Camera_UartInit
        LCALL   ??Camera_UartInit?relay
//  186   
//  187   // init the destination address
//  188   Camera_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#Camera_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  189   Camera_DstAddr.endPoint = Monitor_ENDPOINT;
        MOV     DPTR,#Camera_DstAddr + 9
        MOV     A,#0xa
        MOVX    @DPTR,A
//  190   Camera_DstAddr.addr.shortAddr = 0x0000;		// coordinator
        MOV     DPTR,#Camera_DstAddr
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  191 	
//  192   // Fill out the endpoint description.
//  193   Camera_epDesc.endPoint = Monitor_ENDPOINT;
        MOV     DPTR,#Camera_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  194   Camera_epDesc.task_id = &Camera_TaskID;
        MOV     DPTR,#Camera_epDesc + 1
        MOV     A,#Camera_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Camera_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  195   Camera_epDesc.simpleDesc
//  196             = (SimpleDescriptionFormat_t *)&Camera_SimpleDesc;
        MOV     DPTR,#Camera_epDesc + 3
        MOV     A,#Camera_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Camera_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  197   Camera_epDesc.latencyReq = noLatencyReqs;
        MOV     DPTR,#Camera_epDesc + 5
        MOV     A,#0x0
        MOVX    @DPTR,A
//  198 
//  199   // Register the endpoint description with the AF
//  200   afRegister( &Camera_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Camera_epDesc & 0xff
        MOV     R3,#(Camera_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
        MOV     A,R1
//  201 
//  202   // Set the size
//  203   mtu.kvp        = FALSE;
        MOV     DPTR,#mtu
        MOV     A,#0x0
        MOVX    @DPTR,A
//  204   mtu.aps.secure = FALSE;
        MOV     DPTR,#mtu + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  205   maxTransmitDataLen = afDataReqMTU( &mtu );
        ; Setup parameters for call to function afDataReqMTU
        MOV     R2,#mtu & 0xff
        MOV     R3,#(mtu >> 8) & 0xff
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#maxTransmitDataLen
        MOVX    @DPTR,A
//  206 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  207 
//  208 /*********************************************************************
//  209  * @fn      Camera_ProcessEvent
//  210  *
//  211  * @brief   Sensor Application Task event processor.  This function
//  212  *          is called to process all events for the task.  Events
//  213  *          include timers, messages and any other user defined events.
//  214  *
//  215  * @param   task_id  - The OSAL assigned task ID.
//  216  * @param   events - events to process.  This is a bit map and can
//  217  *                   contain more than one event.
//  218  *
//  219  * @return  none
//  220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 uint16 WirelessMonitorSystem_ProcessEvent( uint8 task_id, uint16 events )
WirelessMonitorSystem_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function WirelessMonitorSystem_ProcessEvent
        CODE
//  222 {
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, Camera_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, Camera_SendResetCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, Camera_ToolTimesOfEight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, Camera_SendDataCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 7,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  223   afIncomingMSGPacket_t *MSGpkt;
//  224   afDataConfirm_t *afDataConfirm;
//  225 
//  226   // Data Confirmation message fields
//  227   byte sentEP;
//  228   ZStatus_t sentStatus;
//  229   byte sentTransID;       // This should match the value sent
//  230   (void)task_id;  		  // Intentionally unreferenced parameter
//  231 
//  232   if ( events & SYS_EVENT_MSG )
        MOV     A,R6
        ANL     A,#0x0
        MOV     R0,A
        MOV     A,R7
        ANL     A,#0x80
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??WirelessMonitorSystem_ProcessEvent_0 & 0xFFFF
//  233   {
//  234     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Camera_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Camera_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
//  235     while ( MSGpkt )
??WirelessMonitorSystem_ProcessEvent_1:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??WirelessMonitorSystem_ProcessEvent_2 & 0xFFFF
//  236     {
//  237       switch ( MSGpkt->hdr.event )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??WirelessMonitorSystem_ProcessEvent_3
        ADD     A,#0x49
        JZ      ??WirelessMonitorSystem_ProcessEvent_4
        ADD     A,#-0x2c
        JZ      $+5
        LJMP    ??WirelessMonitorSystem_ProcessEvent_5 & 0xFFFF
//  238       {
//  239 
//  240         case AF_DATA_CONFIRM_CMD:
//  241           afDataConfirm = (afDataConfirm_t *)MSGpkt;
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  242           sentEP = afDataConfirm->endpoint;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  243           sentStatus = afDataConfirm->hdr.status;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  244           sentTransID = afDataConfirm->transID;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  245           (void)sentEP;
//  246           (void)sentTransID;
//  247 
//  248           // Action taken when confirmation is received.
//  249           if ( sentStatus == ZSuccess )
//  250           {
//  251 		  }
//  252 			 
//  253 		  // delay just a little time as a during
//  254 		  // here just wait 20 ms for test
//  255 //		  if( cameraState == CAMERA_RESET )
//  256 //		  {
//  257 //			  // here you just need to reset the camera
//  258 //			  // and the incoming camera data request will
//  259 //			  // send the clear command the continious cmd
//  260 //			// delay enough time for the camera to initialized
//  261 //			int counter = 2500;
//  262 //			while(counter--);
//  263 //			Camera_SendResetCMD();
//  264 //		  }
//  265 		  if( cameraState ==  CAMERA_SEND_DATA )	
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??WirelessMonitorSystem_ProcessEvent_5
//  266 		  {
//  267 			// this will first happen when the 
//  268 			// start frame send out
//  269 			// we just know that the start frame send out successfully 
//  270 			// but we can't receive the data frame
//  271 			osal_start_timerEx(Camera_TaskID, 
//  272 							   CAMERA_IMAGE_READ_EVT,
//  273 							   CAMERA_SEND_DELAY);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Camera_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,R1
//  274 		  }
//  275           break;
        SJMP    ??WirelessMonitorSystem_ProcessEvent_5
//  276 
//  277         case AF_INCOMING_MSG_CMD:
//  278           Camera_MessageMSGCB( MSGpkt );
??WirelessMonitorSystem_ProcessEvent_3:
        ; Setup parameters for call to function Camera_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Camera_MessageMSGCB?relay
//  279           break;
        SJMP    ??WirelessMonitorSystem_ProcessEvent_5
//  280 
//  281         case ZDO_STATE_CHANGE:
//  282           Camera_NwkState = (devStates_t)(MSGpkt->hdr.status);
??WirelessMonitorSystem_ProcessEvent_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Camera_NwkState
        MOVX    @DPTR,A
//  283           if ( (Camera_NwkState == DEV_ZB_COORD)
//  284               || (Camera_NwkState == DEV_ROUTER)
//  285               || (Camera_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#Camera_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??WirelessMonitorSystem_ProcessEvent_6
        MOV     DPTR,#Camera_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??WirelessMonitorSystem_ProcessEvent_6
        MOV     DPTR,#Camera_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??WirelessMonitorSystem_ProcessEvent_5
//  286           {
//  287 			  // get address
//  288 			  srcAddr = NLME_GetShortAddr();
??WirelessMonitorSystem_ProcessEvent_6:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#srcAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  289 			  parAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     DPTR,#parAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  290 			  
//  291 			  //send topology information
//  292 			  // here we can wait the camera initialized then
//  293 			  // send topology to the monitor
//  294 			  //Camera_SendTopoInformation();  
//  295 			  osal_start_timerEx(Camera_TaskID,
//  296 								 CAMERA_INIT_EVT,
//  297 								 2500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x3c
        MOV     R5,#0x9
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#Camera_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,R1
//  298 			  
//  299 			  // here you just need to reset the camera
//  300 			  // and the incoming camera data request will
//  301 			  // send the clear command the continious cmd
//  302 //			  Camera_SendResetCMD();
//  303           }
//  304           break;
//  305 
//  306         default:
//  307           break;
//  308       }
//  309       // Release the memory
//  310       osal_msg_deallocate( (uint8 *)MSGpkt );
??WirelessMonitorSystem_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
        MOV     A,R1
//  311       // Next
//  312       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Camera_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Camera_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        LJMP    ??WirelessMonitorSystem_ProcessEvent_1 & 0xFFFF
//  313     }
//  314 
//  315     // return unprocessed events
//  316     return (events ^ SYS_EVENT_MSG);
??WirelessMonitorSystem_ProcessEvent_2:
        MOV     A,R6
        XRL     A,#0x0
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??WirelessMonitorSystem_ProcessEvent_7 & 0xFFFF
//  317   }
//  318   
//  319   // initialize the camera
//  320   if ( events & CAMERA_INIT_EVT )
??WirelessMonitorSystem_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??WirelessMonitorSystem_ProcessEvent_8
//  321   {
//  322 	// init the camera 
//  323 	// send the reset command here
//  324 	Camera_SendResetCMD();
        ; Setup parameters for call to function Camera_SendResetCMD
        LCALL   ??Camera_SendResetCMD?relay
//  325 	// so will send the topology information at the 
//  326 	// ack for reset
//  327 	
//  328 	return (events ^ CAMERA_INIT_EVT);
        MOV     A,R6
        XRL     A,#0x4
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x0
        MOV     R3,A
        SJMP    ??WirelessMonitorSystem_ProcessEvent_7
//  329   }
//  330   
//  331    // transfer the camera data
//  332   if ( events & CAMERA_IMAGE_READ_EVT )
??WirelessMonitorSystem_ProcessEvent_8:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??WirelessMonitorSystem_ProcessEvent_9
//  333   {
//  334 	// you should keep care of this , that's the 
//  335 	// the last time the data request for the camera
//  336 	// maybe is more than needed, but this don't event make the 
//  337 	// the situation worse, it will always work well
//  338 	// cause will check the length in the AF send 
//  339 	// or we can chack the length in the ack
//  340 	if(currentRead < imageLength){
        MOV     DPTR,#currentRead
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#imageLength
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??WirelessMonitorSystem_ProcessEvent_10
//  341 	  // get the mtu and sent the request
//  342 	  maxTransmitDataLen = afDataReqMTU( &mtu );
        ; Setup parameters for call to function afDataReqMTU
        MOV     R2,#mtu & 0xff
        MOV     R3,#(mtu >> 8) & 0xff
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#maxTransmitDataLen
        MOVX    @DPTR,A
//  343 	  // here just request the data from the camera
//  344 	  // here you must read the data with a address which
//  345 	  // is the times of 8
//  346 	  // so just make
//  347 	  Camera_SendDataCMD(currentAddr, Camera_ToolTimesOfEight(maxTransmitDataLen));
        ; Setup parameters for call to function Camera_SendDataCMD
        ; Setup parameters for call to function Camera_ToolTimesOfEight
        MOV     DPTR,#maxTransmitDataLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Camera_ToolTimesOfEight?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#currentAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Camera_SendDataCMD?relay
        SJMP    ??WirelessMonitorSystem_ProcessEvent_11
//  348 	  // you  should update the data read and current addr in the 
//  349 	  // data ack 
//  350 	}
//  351 	else
//  352 	{
//  353 	  // data send ok
//  354 	  // reset all state 
//  355 //	  cameraState = CAMERA_RESET;
//  356 	  cameraState = CAMERA_CLEAR;
??WirelessMonitorSystem_ProcessEvent_10:
        MOV     DPTR,#cameraState
        MOV     A,#0x2
        MOVX    @DPTR,A
//  357 	  currentRead = 0;
        MOV     DPTR,#currentRead
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  358 	  currentAddr = 0;
        MOV     DPTR,#currentAddr
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  359 	  imageLength = 0;
        MOV     DPTR,#imageLength
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  360 	}
//  361     // return unprocessed events
//  362     return (events ^ CAMERA_IMAGE_READ_EVT);
??WirelessMonitorSystem_ProcessEvent_11:
        MOV     A,R6
        XRL     A,#0x2
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x0
        MOV     R3,A
        SJMP    ??WirelessMonitorSystem_ProcessEvent_7
//  363   }
//  364   
//  365   // Discard unknown events
//  366   return 0;
??WirelessMonitorSystem_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??WirelessMonitorSystem_ProcessEvent_7:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  367 }
//  368 
//  369 /*********************************************************************
//  370  * @fn      LCD_MessageMSGCB
//  371  *
//  372  * @brief   Data message processor callback.  This function processes
//  373  *          any incoming data - probably from other devices.  So, based
//  374  *          on cluster ID, perform the intended action.
//  375  *
//  376  * @param   none
//  377  *
//  378  * @return  none
//  379  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  380 static void Camera_MessageMSGCB( afIncomingMSGPacket_t *pckt )
Camera_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Camera_MessageMSGCB
        CODE
//  381 {
        FUNCALL Camera_MessageMSGCB, Camera_SendTopoInformation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_MessageMSGCB, Camera_SendClearCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  382   // According to the clusterID
//  383   switch( pckt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for Camera_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        10
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Camera_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Camera_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Camera_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Camera_MessageMSGCB_2
        CODE
//  384   {
//  385 	// send the topology information
//  386   	case TOPO_REQ:
//  387       Camera_SendTopoInformation();
??Camera_MessageMSGCB_1:
        ; Setup parameters for call to function Camera_SendTopoInformation
        LCALL   ??Camera_SendTopoInformation?relay
//  388     break;
        SJMP    ??Camera_MessageMSGCB_0
//  389 	// send image data
//  390   	case IMAGE_REQ:
//  391 	  // set the camera pointer to clear
//  392 	  // cause the the camera is reset when the node start
//  393 	  cameraState = CAMERA_CLEAR;
??Camera_MessageMSGCB_2:
        MOV     DPTR,#cameraState
        MOV     A,#0x2
        MOVX    @DPTR,A
//  394 	  currentRead = 0;
        MOV     DPTR,#currentRead
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  395 	  currentAddr = 0;
        MOV     DPTR,#currentAddr
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  396 	  imageLength = 0;
        MOV     DPTR,#imageLength
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  397 	  // here you should send the clear command to the camera
//  398 	  Camera_SendClearCMD();
        ; Setup parameters for call to function Camera_SendClearCMD
        LCALL   ??Camera_SendClearCMD?relay
//  399 	break;
//  400   }
//  401 }
??Camera_MessageMSGCB_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  402 
//  403 /*********************************************************************
//  404  *
//  405  *@fn Camera_SendStartFrame
//  406  *
//  407  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 void Camera_SendImageStartFrame()
Camera_SendImageStartFrame:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Camera_SendImageStartFrame
        CODE
//  409 {
        FUNCALL Camera_SendImageStartFrame, Camera_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageStartFrame, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  410   // Define the Frame
//  411   byte frame[9] = {0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  412   
//  413   // Build the Frame
//  414   // Fill SOF	0xFE
//  415   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  416   // Fill len
//  417   frame[1] = 2;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  418   // Fill CMD
//  419   frame[2] = LO_UINT16(CAMERA_START_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        MOVX    @DPTR,A
//  420   frame[3] = HI_UINT16(CAMERA_START_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  421   // Fill Addr
//  422   frame[4] = LO_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  423   frame[5] = HI_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  424   // fill the length
//  425   frame[6] = LO_UINT16(imageLength);
        MOV     DPTR,#imageLength
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  426   frame[7] = HI_UINT16(imageLength);
        MOV     DPTR,#imageLength
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  427   // Cal and fill FCS
//  428   frame[8] = Camera_CalcFCS((byte*)&frame[1], 7);
        ; Setup parameters for call to function Camera_CalcFCS
        MOV     R1,#0x7
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??Camera_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  429   
//  430   // Send the data to Coordinator
//  431   AF_DataRequest( &Camera_DstAddr, 
//  432 				  &Camera_epDesc,
//  433 				  ZIGBEE_COMMON_CLUSTER,
//  434 				  9,
//  435 				  (byte *)frame,
//  436 				  &Camera_TransID,
//  437 				  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#Camera_TransID & 0xff
        MOV     ?V0 + 1,#(Camera_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x20
        MOV     R4,#Camera_epDesc & 0xff
        MOV     R5,#(Camera_epDesc >> 8) & 0xff
        MOV     R2,#Camera_DstAddr & 0xff
        MOV     R3,#(Camera_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
//  438 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  439 
//  440 /*********************************************************************
//  441  *
//  442  *@fn 	Camera_SendImageData
//  443  *
//  444  *@brief	A very Good way to send the data out
//  445  *
//  446  *@param		None
//  447  *
//  448  *@return	None
//  449  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  450 void Camera_SendImageData( byte* buffer, byte len )
Camera_SendImageData:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Camera_SendImageData
        CODE
//  451 {  
        FUNCALL Camera_SendImageData, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageData, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageData, Camera_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageData, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendImageData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
//  452   // alloc memory
//  453   byte* imageBuffer = (byte*)osal_mem_alloc(len+7);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x7
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  454   osal_memset(imageBuffer, 0x00, len+7);
        ; Setup parameters for call to function osal_memset
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#0x7
        MOV     R4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R1,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_memset?relay
//  455   
//  456   /*
//  457    * |	SOF 1| LEN  1| CMD 2| Addr 2| Data | FCS 1|
//  458    *  Max length is maxTransmitDataLen
//  459    */
//  460   // Add SOF 
//  461   imageBuffer[0] = 0xFE;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  462   // Add DataLen containing len+1
//  463   imageBuffer[1] = len;
        MOV     A,?V0 + 0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  464   // Fill cmd
//  465   imageBuffer[2] = LO_UINT16(CAMERA_DATA_CMD);
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOV     A,#0x8
        MOVX    @DPTR,A
//  466   imageBuffer[3] = HI_UINT16(CAMERA_DATA_CMD);
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  467   // Fill Addr
//  468   imageBuffer[4] = LO_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  469   imageBuffer[5] = HI_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  470   // Add the data
//  471   osal_memcpy(&imageBuffer[6], buffer, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,?V0 + 2
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  472   // Fill fcs
//  473   imageBuffer[len+6] = Camera_CalcFCS(&imageBuffer[1], len+5);
        ; Setup parameters for call to function Camera_CalcFCS
        MOV     A,#0x5
        ADD     A,?V0 + 0
        MOV     R1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??Camera_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 5
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  474 
//  475   // send the data
//  476   AF_DataRequest( &Camera_DstAddr, 
//  477 				&Camera_epDesc,
//  478 				ZIGBEE_COMMON_CLUSTER,
//  479 				len+7,
//  480 				(byte *)imageBuffer,
//  481 				&Camera_TransID,
//  482 				AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 1,#0x1e
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,#Camera_TransID & 0xff
        MOV     ?V0 + 5,#(Camera_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#0x7
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 4,#0xb
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,#0x20
        MOV     R4,#Camera_epDesc & 0xff
        MOV     R5,#(Camera_epDesc >> 8) & 0xff
        MOV     R2,#Camera_DstAddr & 0xff
        MOV     R3,#(Camera_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
//  483  
//  484   // free the data
//  485   osal_mem_free((byte*)imageBuffer);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  486   imageBuffer = NULL;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  487 }
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  488 
//  489 /*********************************************************************
//  490  *
//  491  * @fn		Camera_SendTopoInfo
//  492  *
//  493  *
//  494  *
//  495  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  496 static void Camera_SendTopoInformation()
Camera_SendTopoInformation:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function Camera_SendTopoInformation
        CODE
//  497 {
        FUNCALL Camera_SendTopoInformation, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendTopoInformation, copyExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendTopoInformation, Camera_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendTopoInformation, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  498   
//  499   unsigned char* srcExtAddr;
//  500   srcExtAddr = NLME_GetExtAddr();
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  501   byte frame[19] = {0};
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x13
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  502   
//  503   // Build the Frame
//  504   // Fill SOF	0xFE
//  505   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  506   // Fill len
//  507   frame[1] = 12;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xc
        MOVX    @DPTR,A
//  508   // Fill CMD
//  509   frame[2] = LO_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  510   frame[3] = HI_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  511   // Fill Addr
//  512   frame[4] = LO_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  513   frame[5] = HI_UINT16(srcAddr);
        MOV     DPTR,#srcAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  514   // fill type
//  515   frame[6] = LO_UINT16(CAMERA);
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
//  516   frame[7] = HI_UINT16(CAMERA);
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  517   // Fill Parent
//  518   frame[8] = LO_UINT16(parAddr);
        MOV     DPTR,#parAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  519   frame[9] = HI_UINT16(parAddr);
        MOV     DPTR,#parAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  520   // fill the ieee64 address
//  521   copyExtAddr(srcExtAddr, (byte*)&frame[10]); 
        ; Setup parameters for call to function copyExtAddr
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 0
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        MOV     R3,?V0 + 1
        LCALL   ??copyExtAddr?relay
//  522   // Cal and fill FCS
//  523   frame[18] = Camera_CalcFCS((byte*)&frame[1], 17);
        ; Setup parameters for call to function Camera_CalcFCS
        MOV     R1,#0x11
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??Camera_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  524   
//  525   // Send the data to Coordinator
//  526   AF_DataRequest( &Camera_DstAddr, 
//  527 				  &Camera_epDesc,
//  528 				  ZIGBEE_COMMON_CLUSTER,
//  529 				  19,
//  530 				  (byte *)frame,
//  531 				  &Camera_TransID,
//  532 				  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#Camera_TransID & 0xff
        MOV     ?V0 + 1,#(Camera_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#0x13
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R1,#0x20
        MOV     R4,#Camera_epDesc & 0xff
        MOV     R5,#(Camera_epDesc >> 8) & 0xff
        MOV     R2,#Camera_DstAddr & 0xff
        MOV     R3,#(Camera_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
//  533 }
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  534 
//  535 /*********************************************************************
//  536  * @fn      Camera_CalcFCS
//  537  *
//  538  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  539  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  540  *
//  541  * @param   byte *msg_ptr - message pointer
//  542  * @param   byte len - length (in bytes) of message
//  543  *
//  544  * @return  result byte
//  545  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  546 byte Camera_CalcFCS( uint8 *msg_ptr, uint8 len )
Camera_CalcFCS:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Camera_CalcFCS
        CODE
//  547 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  548   byte x;
//  549   byte xorResult = 0x00;
        MOV     R1,#0x0
//  550 
//  551   for ( x=0; x<len; x++ )
        MOV     R0,#0x0
??Camera_CalcFCS_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JNC     ??Camera_CalcFCS_1
//  552     xorResult ^=  msg_ptr[x];
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
        SJMP    ??Camera_CalcFCS_0
//  553 
//  554   return ( xorResult );
??Camera_CalcFCS_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  555 }
//  556 
//  557 /*********************************************************************
//  558  *
//  559  * @fn		Camera_UartInit
//  560  *
//  561  * @brief	this method init the usart for the coordinator
//  562  *
//  563  *
//  564  * @param   None
//  565  *
//  566  * @return  void
//  567  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 static void Camera_UartInit()
Camera_UartInit:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Camera_UartInit
        CODE
//  569 {
        FUNCALL Camera_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  570   // create the uart structure
//  571   halUARTCfg_t uartConfig;
//  572   // set the parameters
//  573   uartConfig.configured           = TRUE;               
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  574   uartConfig.baudRate             = HAL_UART_BR_115200;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  575   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  576   uartConfig.flowControlThreshold = 64;   				
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  577   uartConfig.rx.maxBufSize        = 128;  				
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  578   uartConfig.tx.maxBufSize        = 128;  				
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  579   uartConfig.idleTimeout          = 6;    				
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  580   uartConfig.intEnable            = TRUE;               
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  581   uartConfig.callBackFunc         = Camera_UartCallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??Camera_UartCallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??Camera_UartCallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  582   // open it
//  583   HalUARTOpen (UART_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
        MOV     A,R1
//  584 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  585 
//  586 /*********************************************************************
//  587  *
//  588  * @fn		Camera_UartCallBack
//  589  *
//  590  * @brief	this method deal with the uart event
//  591  *
//  592  *
//  593  * @param   port  -- uart port
//  594  *			event -- event occur
//  595  *
//  596  * @return  void
//  597  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  598 static void Camera_UartCallBack( uint8 port, uint8 event )
Camera_UartCallBack:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Camera_UartCallBack
        CODE
//  599 {
        FUNCALL Camera_UartCallBack, Camera_UartInterface
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  600   (void)port;
//  601 
//  602   // if Rx interrupt has occur
//  603   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)))
        MOV     A,#0x7
        ANL     A,R7
        JZ      ??Camera_UartCallBack_0
//  604   {
//  605 	Camera_UartInterface();
        ; Setup parameters for call to function Camera_UartInterface
        LCALL   ??Camera_UartInterface?relay
//  606   }
//  607 }
??Camera_UartCallBack_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  608 
//  609 // Camera_Interface

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  610 static void Camera_UartInterface()
Camera_UartInterface:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Camera_UartInterface
        CODE
//  611 {
        FUNCALL Camera_UartInterface, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Camera_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Camera_SendTopoInformation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Camera_SendImageStartFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Camera_SendClearCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, Camera_SendImageData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_UartInterface, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  612   byte* ack = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  613   byte* buffer = NULL;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  614   byte sendLength = 0;
        MOV     ?V0 + 1,#0x0
//  615   byte bytesInRxBuffer = 0;
        MOV     ?V0 + 0,#0x0
//  616   
//  617   if( cameraState < CAMERA_RECEIVE_LEN )	// ignore the ack
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??Camera_UartInterface_0
//  618   {
//  619 		// read all data out and send new command
//  620 		bytesInRxBuffer = Hal_UART_RxBufLen(UART_PORT);
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     ?V0 + 0,A
//  621 		// memory data and read all data out
//  622 		ack = osal_mem_alloc(bytesInRxBuffer);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  623 		// this data will be destroyed at the end of the method
//  624 		HalUARTRead(UART_PORT, (byte*)ack, bytesInRxBuffer);
        ; Setup parameters for call to function HalUARTRead
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  625 		// send next command
//  626 		// keep care that if the this is the reset ack
//  627 		// you should never send next command again
//  628 		if(CAMERA_RESET != cameraState)
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??Camera_UartInterface_1
//  629 		{
//  630 			Camera_SendCommand();
        ; Setup parameters for call to function Camera_SendCommand
        LCALL   ??Camera_SendCommand?relay
//  631 			// update the current state
//  632 			cameraState++;
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??Camera_UartInterface_2 & 0xFFFF
//  633 		}
//  634 		else	// this is the ack for reset command
//  635 		{
//  636 		  // here send the topology information to the monitor
//  637 		  Camera_SendTopoInformation();
??Camera_UartInterface_1:
        ; Setup parameters for call to function Camera_SendTopoInformation
        LCALL   ??Camera_SendTopoInformation?relay
        LJMP    ??Camera_UartInterface_2 & 0xFFFF
//  638 		}
//  639   }
//  640   else
//  641   {
//  642 	  if(CAMERA_RECEIVE_LEN == cameraState)
??Camera_UartInterface_0:
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Camera_UartInterface_3
//  643 	  {
//  644 		  // here you will deal with the length ack with length in it
//  645 		  // here you need to read enough data out and get the length
//  646 		  bytesInRxBuffer = Hal_UART_RxBufLen(UART_PORT);
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     ?V0 + 0,A
//  647 		  if( 9 == bytesInRxBuffer )
        MOV     A,#0x9
        XRL     A,?V0 + 0
        JNZ     ??Camera_UartInterface_4
//  648 		  {
//  649 			  ack = osal_mem_alloc(9);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x9
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  650 			  // the last two bytes are the length
//  651 			  HalUARTRead(UART_PORT, ack, 9);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  652 			  // get the image len
//  653 			  imageLength = BUILD_UINT16(ack[8], ack[7]);
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#imageLength
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  654 			  // here you need to send the starter command to 
//  655 			  // the monitor with the data length
//  656 			  Camera_SendImageStartFrame();
        ; Setup parameters for call to function Camera_SendImageStartFrame
        LCALL   ??Camera_SendImageStartFrame?relay
//  657 			  // update the state
//  658 			  cameraState++;
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??Camera_UartInterface_2 & 0xFFFF
//  659 		  }
//  660 		  else
//  661 		  {
//  662 			// from the start and read again
//  663 			cameraState = CAMERA_CLEAR;
??Camera_UartInterface_4:
        MOV     DPTR,#cameraState
        MOV     A,#0x2
        MOVX    @DPTR,A
//  664 			// send clear command
//  665 			Camera_SendClearCMD();
        ; Setup parameters for call to function Camera_SendClearCMD
        LCALL   ??Camera_SendClearCMD?relay
        LJMP    ??Camera_UartInterface_2 & 0xFFFF
//  666 		  }
//  667 	  }
//  668 	  else if( CAMERA_SEND_DATA == cameraState )
??Camera_UartInterface_3:
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JZ      $+5
        LJMP    ??Camera_UartInterface_2 & 0xFFFF
//  669 	  {
//  670 		  // ignore two bytes first and send the real data to the 
//  671 		  // pack and AF send mathod
//  672 		  // read all data out and send new command
//  673 		  bytesInRxBuffer = Hal_UART_RxBufLen(UART_PORT);
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     ?V0 + 0,A
//  674 		  // memory data and read all data out
//  675 		  ack = osal_mem_alloc(bytesInRxBuffer);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  676 		  buffer = osal_mem_alloc(bytesInRxBuffer-10);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#-0xa
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  677 		  HalUARTRead(UART_PORT, ack, bytesInRxBuffer);
        ; Setup parameters for call to function HalUARTRead
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  678 		  // ignore first and last 7 bytes
//  679 		  if((bytesInRxBuffer-10) > (imageLength - currentRead))
        MOV     DPTR,#imageLength
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#currentRead
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#-0xa
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JNC     ??Camera_UartInterface_5
//  680 		  {
//  681 			sendLength = (imageLength - currentRead);
        MOV     DPTR,#currentRead
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#imageLength
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 1,A
        SJMP    ??Camera_UartInterface_6
//  682 		  }
//  683 		  else
//  684 		  {
//  685 			sendLength = bytesInRxBuffer-10;
??Camera_UartInterface_5:
        MOV     A,#-0xa
        ADD     A,?V0 + 0
        MOV     ?V0 + 1,A
//  686 		  }
//  687 		  //  pack the data and send
//  688 		  osal_memcpy(buffer, &ack[5], sendLength);
??Camera_UartInterface_6:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x5
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 4,?V0 + 1
        MOV     ?V0 + 5,#0x0
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  689 		  Camera_SendImageData(buffer, sendLength);
        ; Setup parameters for call to function Camera_SendImageData
        MOV     R1,?V0 + 1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??Camera_SendImageData?relay
//  690 		  
//  691 		  // update the addr and read counter
//  692 		  currentRead += sendLength;
        MOV     ?V0 + 4,?V0 + 1
        MOV     ?V0 + 5,#0x0
        MOV     DPTR,#currentRead
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOVX    @DPTR,A
//  693 		  currentAddr += sendLength;
        MOV     ?V0 + 4,?V0 + 1
        MOV     ?V0 + 5,#0x0
        MOV     DPTR,#currentAddr
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOVX    @DPTR,A
//  694 		  
//  695 		  // free the data
//  696 		  osal_mem_free((byte*)buffer);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  697   		  // reset
//  698   		  buffer = NULL;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  699 		  sendLength = 0; 
        MOV     ?V0 + 1,#0x0
//  700 		  
//  701 		  // here you do not to update the state again
//  702 		  // cause the state then will change by the app not the ack
//  703 		  // this will actually happen in the image_read_transfer event
//  704 		  // it will be reset when the user read all imageLength data
//  705 		  // and wait the user send camera command again
//  706 		  // this will make the zigbee enddevice send clear cmd agian
//  707 		  // with ack update the state to receive length state again  
//  708 	  } // end else if CAMERA_SEND_DATA
//  709 	}// end else CAMERA_RECEIVE_LEN
//  710   
//  711   // just dispose the data
//  712   osal_mem_free((byte*)ack);
??Camera_UartInterface_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  713   // reset
//  714   ack = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  715   bytesInRxBuffer = 0;
        MOV     ?V0 + 0,#0x0
//  716 }
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  717 
//  718 // send the command

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  719 static void Camera_SendCommand()
Camera_SendCommand:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function Camera_SendCommand
        CODE
//  720 {
        FUNCALL Camera_SendCommand, Camera_SendShutCMD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendCommand, Camera_SendLengthCMD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  721   switch(cameraState)
        MOV     DPTR,#cameraState
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??Camera_SendCommand_0
        DEC     A
        JZ      ??Camera_SendCommand_1
        SJMP    ??Camera_SendCommand_2
//  722   {
//  723   case CAMERA_CLEAR:
//  724 	// this may be happen when the user request the camera data
//  725 	Camera_SendShutCMD();
??Camera_SendCommand_0:
        ; Setup parameters for call to function Camera_SendShutCMD
        LCALL   ??Camera_SendShutCMD?relay
//  726 	break;
        SJMP    ??Camera_SendCommand_2
//  727   case CAMERA_SHUT:
//  728 	// this is after the the user receive the shut ack
//  729 	Camera_SendLengthCMD();
??Camera_SendCommand_1:
        ; Setup parameters for call to function Camera_SendLengthCMD
        LCALL   ??Camera_SendLengthCMD?relay
//  730 	break;
//  731   // do not need more conditions 
//  732   // cause the length cmd will return a user length for user to send start
//  733   // frame
//  734   // the data ack will carry the data of the camera, then send to the monitor
//  735   }
//  736 }
??Camera_SendCommand_2:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  737 
//  738 // deal with the ack and know what's the ack is
//  739 // sometimes you need not the ack command
//  740 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  741 static void Camera_SendResetCMD( void ){
Camera_SendResetCMD:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function Camera_SendResetCMD
        CODE
        FUNCALL Camera_SendResetCMD, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  742   HalUARTWrite(UART_PORT, (byte*)reset, 4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#reset & 0xff
        MOV     R3,#(reset >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  743 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  744 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  745 static void Camera_SendClearCMD( void ){
Camera_SendClearCMD:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Camera_SendClearCMD
        CODE
        FUNCALL Camera_SendClearCMD, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  746   HalUARTWrite(UART_PORT, (byte*)clear, 5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#clear & 0xff
        MOV     R3,#(clear >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  747 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  748 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  749 static void Camera_SendShutCMD( void ){
Camera_SendShutCMD:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function Camera_SendShutCMD
        CODE
        FUNCALL Camera_SendShutCMD, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  750   HalUARTWrite(UART_PORT, (byte*)shut, 5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#shut & 0xff
        MOV     R3,#(shut >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  751 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
//  752 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  753 static void Camera_SendLengthCMD( void ){
Camera_SendLengthCMD:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function Camera_SendLengthCMD
        CODE
        FUNCALL Camera_SendLengthCMD, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  754   HalUARTWrite(UART_PORT, (byte*)length, 5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#length & 0xff
        MOV     R3,#(length >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  755 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  756 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  757 static void Camera_SendDataCMD( uint16 startAddr, uint16 len ){
Camera_SendDataCMD:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function Camera_SendDataCMD
        CODE
        FUNCALL Camera_SendDataCMD, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendDataCMD, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendDataCMD, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendDataCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Camera_SendDataCMD, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  758   byte* buffer = osal_mem_alloc(16);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x10
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  759   osal_memcpy(buffer, (byte*)data_pre, 6);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#data_pre & 0xff
        MOV     ?V0 + 5,#(data_pre >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  760   buffer[6] = 0x00;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  761   buffer[7] = 0x00;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  762   buffer[8] = HI_UINT16(startAddr);
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        CLR     A
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     A,?V0 + 3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  763   buffer[9] = LO_UINT16(startAddr);
        MOV     A,?V0 + 2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  764   buffer[10] = 0x00;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  765   buffer[11] = 0x00;
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  766   buffer[12] = HI_UINT16(len);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        CLR     A
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     A,?V0 + 1
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  767   buffer[13] = LO_UINT16(len);
        MOV     A,?V0 + 0
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  768   osal_memcpy(&buffer[14], (byte*)data_end, 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#data_end & 0xff
        MOV     ?V0 + 5,#(data_end >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0xe
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  769   // send the command
//  770   HalUARTWrite(UART_PORT, buffer, 16);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  771   // free the buffer
//  772   osal_mem_free((byte*)buffer);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  773   buffer = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  774 }
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  775 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  776 static uint16 Camera_ToolTimesOfEight(uint16 addr)
Camera_ToolTimesOfEight:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function Camera_ToolTimesOfEight
        CODE
//  777 {
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  778   // here you should just read less than the bits
//  779   if((addr/8*8+7) > addr)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     A,?V0 + 0
        MOV     B,#0x8
        MUL     AB
        XCH     A,?V0 + 0
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x8
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JNC     ??Camera_ToolTimesOfEight_0
//  780   {
//  781 	return ((addr/8-1)*8);
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x8
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x8
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        SJMP    ??Camera_ToolTimesOfEight_1
//  782   }
//  783   else
//  784   {
//  785 	return (addr/8*8);
??Camera_ToolTimesOfEight_0:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R2
        MOV     B,#0x8
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x8
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     R3,A
??Camera_ToolTimesOfEight_1:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-4
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock16
//  786   }
//  787 }
//  788 
//  789 /**************************************
//  790 	save extern address in array
//  791 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  792 static void copyExtAddr(byte* src, byte* dst){
copyExtAddr:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function copyExtAddr
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  793 	// here LSB goes first
//  794   	int i = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  795 	while(i < 8){
??copyExtAddr_0:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x8
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??copyExtAddr_1
//  796 	  dst[i] = src[i];
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  797 	  // update
//  798 	  i++;
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??copyExtAddr_0
//  799 	}
//  800 }
??copyExtAddr_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock17

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendImageStartFrame?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendImageStartFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendImageData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendImageData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendTopoInformation?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendTopoInformation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_CalcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_CalcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_UartCallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_UartCallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_UartInterface?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_UartInterface

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendCommand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendResetCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendResetCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendClearCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendClearCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendShutCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendShutCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendLengthCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendLengthCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_SendDataCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_SendDataCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Camera_ToolTimesOfEight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Camera_ToolTimesOfEight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??copyExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    copyExtAddr

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
//  801 /*******************************************************************************
//  802 *******************************************************************************/
// 
// 2 855 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//    98 bytes in segment XDATA_ROM_C
//    35 bytes in segment XDATA_Z
// 
// 2 963 bytes of CODE  memory
//    98 bytes of CONST memory
//    35 bytes of XDATA memory
//
//Errors: none
//Warnings: none

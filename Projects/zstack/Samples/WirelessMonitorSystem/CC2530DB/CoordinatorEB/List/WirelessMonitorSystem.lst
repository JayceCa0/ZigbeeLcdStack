###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         13/Jul/2015  14:23:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\WirelessMonitorSystem\Source\Wirel #
#                          essMonitorSystem.c                                 #
#    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\WirelessMonitorSystem\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg"             #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\WirelessMonitorSystem\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg"            #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=500         #
#                          -DQUEUED_POLL_RATE=30 -DRESPONSE_POLL_RATE=100)    #
#                          -DREJOIN_POLL_RATE=440 "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\Source\WirelessMonito #
#                          rSystem.c" -D HAL_UART -D NWK_MAX_DEVICE_LIST=3    #
#                          -lC "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Samples\WirelessMonitorSystem\CC2530D #
#                          B\CoordinatorEB\List\" -lA "C:\Texas               #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\CoordinatorE #
#                          B\List\" --diag_suppress Pe001,Pa010 -o "C:\Texas  #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\CoordinatorE #
#                          B\Obj\" -e --no_code_motion --debug --core=plain   #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Texas                  #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\" -I         #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\WirelessMonitorSystem\CC2530DB\.. #
#                          \Source\" -I "C:\Texas Instruments\ZStack-CC2530-2 #
#                          .5.1a\Projects\zstack\Samples\WirelessMonitorSyste #
#                          m\CC2530DB\..\..\..\ZMain\TI2530DB\" -I "C:\Texas  #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\hal\include\" -I "C:\Texas           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2530EB\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\include\" -I "C:\Texas           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\high_level\" -I "C:\Texas        #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\low_level\srf04\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\low_level\srf04\single_chip\"    #
#                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\WirelessMonitorSystem\CC2530DB #
#                          \..\..\..\..\..\Components\mt\" -I "C:\Texas       #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\osal\include\" -I "C:\Texas          #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\services\saddr\" -I "C:\Texas        #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\services\sdata\" -I "C:\Texas        #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\af\" -I "C:\Texas              #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\nwk\" -I "C:\Texas             #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sapi\" -I "C:\Texas            #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sec\" -I "C:\Texas             #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sys\" -I "C:\Texas             #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\" -I "C:\Texas             #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\zmac\" -I "C:\Texas                  #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\WirelessMonitorSystem\CC2530DB\..\..\..\..\ #
#                          ..\Components\zmac\f8w\" -Ohz --require_prototypes #
#    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\WirelessMonitorSystem\CC2530DB\Coo #
#                          rdinatorEB\List\WirelessMonitorSystem.lst          #
#    Object file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\WirelessMonitorSystem\CC2530DB\Coo #
#                          rdinatorEB\Obj\WirelessMonitorSystem.r51           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\WirelessMonitorSystem\Source\WirelessMonitorSystem.c
      1          /*********************************************************************
      2           *
      3           *
      4           * @Reverse Time:
      5           *				set the number of the list in the list, so here the device
      6           *			only associated limited size. set "NWK_MAX_DEVICE_LIST" in the
      7           *			pre-compile option.
      8           *						--2015/4/30
      9           *
     10           */
     11          
     12          /*********************************************************************
     13           * INCLUDES
     14           */
     15          #include "OSAL.h"
     16          #include "AF.h"
     17          #include "ZDApp.h"
     18          #include "ZDObject.h"
     19          #include "ZDProfile.h"
     20          
     21          #include "WirelessMonitorSystem.h"
     22          #include "DebugTrace.h"
     23          
     24          #if !defined( WIN32 )
     25            #include "OnBoard.h"
     26          #endif
     27          
     28          /* HAL */
     29          #include "hal_uart.h"
     30          
     31          
     32          /*********************************************************************
     33           * MACROS
     34           */
     35          
     36          // Max in / out Cluster number
     37          #define Monitor_MAX_IN_CLUSTERS			1
     38          #define Monitor_MAX_OUT_CLUSTERS		10
     39          
     40          // State For Monitor Data
     41          #define Machine_SOF_STATE			0
     42          #define Machine_LEN_STATE			1
     43          #define Machine_CMD1_STATE	 		2
     44          #define Machine_CMD2_STATE			3
     45          #define Machine_DST1_STATE			4
     46          #define Machine_DST2_STATE 			5
     47          #define Machine_DATA_STATE			6
     48          #define Machine_FCS_STATE			7	
     49          
     50          // START FRAME OF MONITOR DATA
     51          #define MONITOR_START_FRMAE			0xFE
     52          
     53          // EVENT
     54          #define MONITOR_SEND_DATA_EVT		0x0001
     55          #define MONITOR_RESEND_EVT			0x0002
     56          
     57          // Delay a time to make sure the coordinator can receive data
     58          // if not delay the coordinator can't receive data from other node
     59          #define MONITOR_SEND_DELAY			(RESPONSE_POLL_RATE * 2)
     60          
     61          // resend delay
     62          #define MONITOR_RESEND_DELAY	10
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          // ACK

   \                                 In  segment XDATA_ROM_C, align 1
     68          const byte ACK[] = {
   \                     ACK:
   \   000000   FE           DB 254
   \   000001   00           DB 0
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
     69            0xFE,
     70            0x00,
     71            LO_UINT16(ACK_CMD),
     72            HI_UINT16(ACK_CMD),
     73            0x00, 
     74            0x00,
     75            0x00};
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL VARIABLES
     83           */
     84          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     85          const cId_t Monitor_ClusterInList[Monitor_MAX_IN_CLUSTERS] =
   \                     Monitor_ClusterInList:
   \   000000   0B00         DW 11
     86          {
     87          	ZIGBEE_COMMON_CLUSTER
     88          };
     89          

   \                                 In  segment XDATA_ROM_C, align 1
     90          const cId_t Monitor_ClusterOutList[Monitor_MAX_OUT_CLUSTERS] =
   \                     Monitor_ClusterOutList:
   \   000000   0A00         DW 10
   \   000002   0C00         DW 12
   \   000004   0200         DW 2
   \   000006   0300         DW 3
   \   000008   0400         DW 4
   \   00000A   0500         DW 5
   \   00000C   0600         DW 6
   \   00000E   0D00         DW 13
   \   000010   0E00         DW 14
   \   000012   0F00         DW 15
     91          {
     92          	TOPO_REQ,
     93          	IMAGE_REQ,
     94          	LCD_SUBJECT_CMD,
     95          	LCD_CLASS_CMD,
     96          	LCD_TEACHER_CMD,
     97          	LCD_PEOPLE_CMD,
     98          	LCD_TIME_CMD,
     99          	ROOM_CMD,
    100          	DATA_ALLOW,
    101          	DATA_REFUSE
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t Monitor_SimpleDesc =
   \                     Monitor_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW Monitor_ClusterInList
   \   000009   0A           DB 10
   \   00000A   ....         DW Monitor_ClusterOutList
    105          {
    106            Monitor_ENDPOINT,              //  int Endpoint;
    107            Monitor_PROFID,                //  uint16 AppProfId[2];
    108            Monitor_DEVICEID,              //  uint16 AppDeviceId[2];
    109            Monitor_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            Monitor_FLAGS,                 //  int   AppFlags:4;
    111            Monitor_MAX_IN_CLUSTERS,           //  byte  AppNumInClusters;
    112            (cId_t *)Monitor_ClusterInList,    //  byte *pAppInClusterList;
    113            Monitor_MAX_OUT_CLUSTERS,          //  byte  AppNumOutClusters;
    114            (cId_t *)Monitor_ClusterOutList    //  byte *pAppOutClusterList;
    115          };
    116          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          endPointDesc_t Monitor_epDesc;
   \                     Monitor_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    118          
    119          /*********************************************************************
    120           * EXTERNAL VARIABLES
    121           */
    122          
    123          /*********************************************************************
    124           * EXTERNAL FUNCTIONS
    125           */
    126          
    127          /*********************************************************************
    128           * LOCAL VARIABLES
    129           */
    130          
    131          /**************************** OSAL **********************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          byte Monitor_TaskID;    // Task ID for internal task/event processing
   \                     Monitor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          byte Monitor_TransID;   // This is the unique message ID (counter)
   \                     Monitor_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t Monitor_NwkState;	// record the network state
   \                     Monitor_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t Monitor_DstAddr;	// Bind endpoint address
   \                     Monitor_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    139          
    140          /*************************** STATE *********************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static byte readStep = Machine_SOF_STATE;
   \                     readStep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          static byte length;
   \                     length:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          static byte fcs;
   \                     fcs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static byte recvDataLen;
   \                     recvDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static byte* pData = NULL;
   \                     pData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    150          
    151          /******************************resend buffer ***********************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          static byte resendBuffer[128] = {0};
   \                     resendBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void Monitor_UartInit( void );
    158          static void Monitor_UartCallBack( uint8 port, uint8 event );
    159          static void Monitor_MessageMSGCB( afIncomingMSGPacket_t *pckt ); 
    160          static void Monitor_ProcessMonitorData( void );
    161          static void Monitor_SendTopologyInformation( void );
    162          static byte Monitor_CalcFCS( uint8 *msg_ptr, uint8 len );
    163          static void Monitor_ProcessMonitorIncomingData(byte* pData);
    164          
    165          /*********************************************************************
    166           * @fn      Monitor_Init
    167           *
    168           * @brief   Initialization function for the Sensor App Task.
    169           *          This is called during initialization and should contain
    170           *          any application specific initialization (ie. hardware
    171           *          initialization/setup, table initialization, power up
    172           *          notificaiton ... ).
    173           *
    174           * @param   task_id - the ID assigned by OSAL.  This ID should be
    175           *                    used to send messages and set timers.
    176           *
    177           * @return  none
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void WirelessMonitorSystem_Init( uint8 task_id )
   \                     WirelessMonitorSystem_Init:
    180          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    181            Monitor_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Monitor_TaskID
   \   000009   F0           MOVX    @DPTR,A
    182            Monitor_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#Monitor_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    183            Monitor_TransID = 0;
   \   000010   90....       MOV     DPTR,#Monitor_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    184            
    185            // init the uart, keep care do not use flow control
    186            Monitor_UartInit();
   \   000015                ; Setup parameters for call to function Monitor_UartInit
   \   000015   12....       LCALL   ??Monitor_UartInit?relay
    187            
    188            // Destinations
    189            Monitor_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000018   90....       MOV     DPTR,#Monitor_DstAddr + 8
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    190            Monitor_DstAddr.endPoint = Monitor_ENDPOINT;
   \   00001E   A3           INC     DPTR
   \   00001F   740A         MOV     A,#0xa
   \   000021   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    191            Monitor_DstAddr.addr.shortAddr = 0xFFFF;	
    192          
    193            // Fill out the endpoint description.
    194            Monitor_epDesc.endPoint = Monitor_ENDPOINT;
   \                     ??CrossCallReturnLabel_23:
   \   000024   90....       MOV     DPTR,#Monitor_epDesc
   \   000027   740A         MOV     A,#0xa
   \   000029   F0           MOVX    @DPTR,A
    195            Monitor_epDesc.task_id = &Monitor_TaskID;
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#Monitor_TaskID & 0xff
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74..         MOV     A,#(Monitor_TaskID >> 8) & 0xff
   \   000031   F0           MOVX    @DPTR,A
    196            Monitor_epDesc.simpleDesc
    197                      = (SimpleDescriptionFormat_t *)&Monitor_SimpleDesc;
   \   000032   A3           INC     DPTR
   \   000033   74..         MOV     A,#Monitor_SimpleDesc & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(Monitor_SimpleDesc >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
    198            Monitor_epDesc.latencyReq = noLatencyReqs;
   \   00003A   A3           INC     DPTR
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    199          
    200            // Register the endpoint description with the AF
    201            afRegister( &Monitor_epDesc );
   \   00003D                ; Setup parameters for call to function afRegister
   \   00003D   7A..         MOV     R2,#Monitor_epDesc & 0xff
   \   00003F   7B..         MOV     R3,#(Monitor_epDesc >> 8) & 0xff
   \   000041   12....       LCALL   ??afRegister?relay
    202            
    203          }
   \   000044                REQUIRE ?Subroutine0
   \   000044                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#Monitor_DstAddr
   \   000004   74FF         MOV     A,#-0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
    204          
    205          /*********************************************************************
    206           * @fn      Monitor_ProcessEvent
    207           *
    208           * @brief   Sensor Application Task event processor.  This function
    209           *          is called to process all events for the task.  Events
    210           *          include timers, messages and any other user defined events.
    211           *
    212           * @param   task_id  - The OSAL assigned task ID.
    213           * @param   events - events to process.  This is a bit map and can
    214           *                   contain more than one event.
    215           *
    216           * @return  none
    217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          uint16 WirelessMonitorSystem_ProcessEvent( uint8 task_id, uint16 events )
   \                     WirelessMonitorSystem_ProcessEvent:
    219          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    220            afIncomingMSGPacket_t *MSGpkt;
    221            afDataConfirm_t *afDataConfirm;
    222          
    223            // Data Confirmation message fields
    224            byte sentEP;
    225            ZStatus_t sentStatus;
    226            byte sentTransID;       // This should match the value sent
    227            (void)task_id;  		  // Intentionally unreferenced parameter
    228          
    229            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??WirelessMonitorSystem_ProcessEvent_0 & 0xFFFF
    230            {
    231              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Monitor_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??WirelessMonitorSystem_ProcessEvent_1
    232              while ( MSGpkt )
    233              {
    234                switch ( MSGpkt->hdr.event )
    235                {
    236                  case AF_DATA_CONFIRM_CMD:
    237                    // This message is received as a confirmation of a data packet sent.
    238                    // The status is of ZStatus_t type [defined in ZComDef.h]
    239                    // The message fields are defined in AF.h
    240                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    241                    sentEP = afDataConfirm->endpoint;
    242                    sentStatus = afDataConfirm->hdr.status;
    243                    sentTransID = afDataConfirm->transID;
    244                    (void)sentEP;
    245                    (void)sentTransID;
    246          
    247          		  if( sentStatus == ZSuccess )
    248          		  {
    249          			// Action taken when confirmation is received.
    250          		  	osal_start_timerEx(	Monitor_TaskID,
    251          							 	MONITOR_SEND_DATA_EVT,
    252          							 	MONITOR_SEND_DELAY);	
    253          		  }
    254                    break;
    255          
    256                  case AF_INCOMING_MSG_CMD:
    257                    Monitor_MessageMSGCB( MSGpkt );
    258                    break;
    259          
    260                  case ZDO_STATE_CHANGE:
    261                    Monitor_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??WirelessMonitorSystem_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#Monitor_NwkState
   \   000017   F0           MOVX    @DPTR,A
    262                    if ( (Monitor_NwkState == DEV_ZB_COORD)
    263                        || (Monitor_NwkState == DEV_ROUTER)
    264                        || (Monitor_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??WirelessMonitorSystem_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??WirelessMonitorSystem_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??WirelessMonitorSystem_ProcessEvent_4
    265                    { 
    266          			// start signal to the coordinator
    267          			HalUARTWrite(UART_PORT, (byte*)ACK, 7);
   \                     ??WirelessMonitorSystem_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C07         MOV     R4,#0x7
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A..         MOV     R2,#ACK & 0xff
   \   00002C   7B..         MOV     R3,#(ACK >> 8) & 0xff
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
    268          			// send the topology information
    269          			Monitor_SendTopologyInformation();
   \   000033                ; Setup parameters for call to function Monitor_SendTopologyInformation
   \   000033   12....       LCALL   ??Monitor_SendTopologyInformation?relay
    270                    }
    271                    break;
    272                }
    273          
    274                // Release the memory
    275                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??WirelessMonitorSystem_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    276          
    277                // Next
    278                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Monitor_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??WirelessMonitorSystem_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#Monitor_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   6050         JZ      ??WirelessMonitorSystem_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   24E6         ADD     A,#-0x1a
   \   000058   601E         JZ      ??WirelessMonitorSystem_ProcessEvent_6
   \   00005A   2449         ADD     A,#0x49
   \   00005C   60B4         JZ      ??WirelessMonitorSystem_ProcessEvent_2
   \   00005E   24D4         ADD     A,#-0x2c
   \   000060   70D4         JNZ     ??WirelessMonitorSystem_ProcessEvent_4
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   70D0         JNZ     ??WirelessMonitorSystem_ProcessEvent_4
   \   000066                ; Setup parameters for call to function osal_start_timerEx
   \   000066   7CC8         MOV     R4,#-0x38
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   7A01         MOV     R2,#0x1
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   90....       MOV     DPTR,#Monitor_TaskID
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   ??osal_start_timerEx?relay
   \   000076   80BE         SJMP    ??WirelessMonitorSystem_ProcessEvent_4
   \                     ??WirelessMonitorSystem_ProcessEvent_6:
   \   000078                ; Setup parameters for call to function HalUARTWrite
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   2420         ADD     A,#0x20
   \   00007C   F582         MOV     DPL,A
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   3400         ADDC    A,#0x0
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FC           MOV     R4,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FD           MOV     R5,A
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   2422         ADD     A,#0x22
   \   00008D   F582         MOV     DPL,A
   \   00008F   E5..         MOV     A,?V0 + 1
   \   000091   3400         ADDC    A,#0x0
   \   000093   F583         MOV     DPH,A
   \   000095   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000098   7900         MOV     R1,#0x0
   \   00009A   12....       LCALL   ??HalUARTWrite?relay
   \   00009D   8097         SJMP    ??WirelessMonitorSystem_ProcessEvent_4
    279              }
    280          	
    281              // return unprocessed events
    282              return (events ^ SYS_EVENT_MSG);
   \                     ??WirelessMonitorSystem_ProcessEvent_5:
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   6480         XRL     A,#0x80
   \                     ??WirelessMonitorSystem_ProcessEvent_7:
   \   0000A4   FB           MOV     R3,A
   \   0000A5   8023         SJMP    ??WirelessMonitorSystem_ProcessEvent_8
    283            }
    284            
    285            // continue to send event
    286            if( events & MONITOR_SEND_DATA_EVT )
   \                     ??WirelessMonitorSystem_ProcessEvent_0:
   \   0000A7   EE           MOV     A,R6
   \   0000A8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AA   500A         JNC     ??WirelessMonitorSystem_ProcessEvent_9
    287            {
    288          	// process the data
    289          	Monitor_ProcessMonitorData();
   \   0000AC                ; Setup parameters for call to function Monitor_ProcessMonitorData
   \   0000AC   12....       LCALL   ??Monitor_ProcessMonitorData?relay
    290          	
    291          	// return unprocessed events
    292          	return (events ^ MONITOR_SEND_DATA_EVT);
   \   0000AF   EE           MOV     A,R6
   \   0000B0   6401         XRL     A,#0x1
   \                     ??WirelessMonitorSystem_ProcessEvent_10:
   \   0000B2   FA           MOV     R2,A
   \   0000B3   EF           MOV     A,R7
   \   0000B4   80EE         SJMP    ??WirelessMonitorSystem_ProcessEvent_7
    293            }
    294            
    295            // resend the data
    296            if( events & MONITOR_RESEND_EVT )
   \                     ??WirelessMonitorSystem_ProcessEvent_9:
   \   0000B6   5402         ANL     A,#0x2
   \   0000B8   600C         JZ      ??WirelessMonitorSystem_ProcessEvent_11
    297            {
    298          	// resend the data
    299          	Monitor_ProcessMonitorIncomingData( resendBuffer );
   \   0000BA                ; Setup parameters for call to function Monitor_ProcessMonitorIncomingData
   \   0000BA   7A..         MOV     R2,#resendBuffer & 0xff
   \   0000BC   7B..         MOV     R3,#(resendBuffer >> 8) & 0xff
   \   0000BE   12....       LCALL   ??Monitor_ProcessMonitorIncomingData?relay
    300          	
    301          	// return unprocessed events
    302          	return (events ^ MONITOR_RESEND_EVT);
   \   0000C1   EE           MOV     A,R6
   \   0000C2   6402         XRL     A,#0x2
   \   0000C4   80EC         SJMP    ??WirelessMonitorSystem_ProcessEvent_10
    303            }
    304            
    305            // Discard unknown events
    306            return 0;
   \                     ??WirelessMonitorSystem_ProcessEvent_11:
   \   0000C6   7A00         MOV     R2,#0x0
   \   0000C8   7B00         MOV     R3,#0x0
   \                     ??WirelessMonitorSystem_ProcessEvent_8:
   \   0000CA                REQUIRE ?Subroutine1
   \   0000CA                ; // Fall through to label ?Subroutine1
    307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    308          
    309          /*********************************************************************
    310           * LOCAL FUNCTIONS
    311           */
    312          
    313          /*********************************************************************
    314           * @fn      Monitor_MessageMSGCB
    315           *
    316           * @brief   Data message processor callback.  This function processes
    317           *          any incoming data - probably from other devices.  So, based
    318           *          on cluster ID, perform the intended action.
    319           *
    320           * @param   none
    321           *
    322           * @return  none
    323           */
    324          void Monitor_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    325          {
    326            // just Write to usart
    327            HalUARTWrite(UART_PORT, pkt->cmd.Data, pkt->cmd.DataLength);
    328          }
    329          
    330          
    331          /*********************************************************************
    332           *
    333           * @fn		Monitor_UartInit
    334           *
    335           * @brief	this method init the usart for the coordinator
    336           *
    337           *
    338           * @param   None
    339           *
    340           * @return  void
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void Monitor_UartInit()
   \                     Monitor_UartInit:
    343          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    344            // create the uart structure
    345            halUARTCfg_t uartConfig;
    346            // set the parameters
    347            uartConfig.configured           = TRUE;               
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    348            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7404         MOV     A,#0x4
   \   000017   F0           MOVX    @DPTR,A
    349            uartConfig.flowControl          = FALSE;
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    350            uartConfig.flowControlThreshold = 128;   				
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7480         MOV     A,#-0x80
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    351            uartConfig.rx.maxBufSize        = 256;  				
   \   00002A   740A         MOV     A,#0xa
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   04           INC     A
   \   000033   F0           MOVX    @DPTR,A
    352            uartConfig.tx.maxBufSize        = 256;  				
   \   000034   7412         MOV     A,#0x12
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   04           INC     A
   \   00003D   F0           MOVX    @DPTR,A
    353            uartConfig.idleTimeout          = 6;    				
   \   00003E   7405         MOV     A,#0x5
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   7406         MOV     A,#0x6
   \   000045   F0           MOVX    @DPTR,A
    354            uartConfig.intEnable            = TRUE;               
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7401         MOV     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
    355            uartConfig.callBackFunc         = Monitor_UartCallBack;
   \   00004E   741B         MOV     A,#0x1b
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   74..         MOV     A,#??Monitor_UartCallBack?relay & 0xff
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#(??Monitor_UartCallBack?relay >> 8) & 0xff
   \   000059   F0           MOVX    @DPTR,A
    356            // open it
    357            HalUARTOpen (UART_PORT, &uartConfig);
   \   00005A                ; Setup parameters for call to function HalUARTOpen
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   AA82         MOV     R2,DPL
   \   000062   AB83         MOV     R3,DPH
   \   000064   7900         MOV     R1,#0x0
   \   000066   12....       LCALL   ??HalUARTOpen?relay
    358          }
   \   000069   741D         MOV     A,#0x1d
   \   00006B                REQUIRE ?Subroutine2
   \   00006B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
    359           
    360          /*********************************************************************
    361           *
    362           * @fn		Monitor_UartCallBack
    363           *
    364           * @brief	this method deal with the uart event
    365           *
    366           *
    367           * @param   port  -- uart port
    368           *			event -- event occur
    369           *
    370           * @return  void
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          void Monitor_UartCallBack( uint8 port, uint8 event )
   \                     Monitor_UartCallBack:
    373          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    374            (void)port;
    375          
    376            // if Rx interrupt has occur
    377            if ((event & (HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT | HAL_UART_RX_FULL)))
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6003         JZ      ??Monitor_UartCallBack_0
    378            {
    379          	// deal with the coming data 
    380          	Monitor_ProcessMonitorData();
   \   00000C                ; Setup parameters for call to function Monitor_ProcessMonitorData
   \   00000C   12....       LCALL   ??Monitor_ProcessMonitorData?relay
    381            }
    382          }
   \                     ??Monitor_UartCallBack_0:
   \   00000F   02....       LJMP    ?Subroutine0 & 0xFFFF
    383          
    384          /*********************************************************************
    385           * @fn      Monitor_ProcessMonitorData()
    386           *
    387           * @brief   process the message from the pc monitor, this
    388           *			message is send by monitor and will send to the node.
    389           *
    390           * @return  none
    391           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void Monitor_ProcessMonitorData()
   \                     Monitor_ProcessMonitorData:
    393          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   800D         SJMP    ??Monitor_ProcessMonitorData_0
    394            uint8  ch;				
    395            uint8  bytesInRxBuffer;
    396            
    397            // if the Rx hava data
    398            while ( Hal_UART_RxBufLen(UART_PORT) )
    399            {
    400              HalUARTRead (UART_PORT, &ch, 1);
    401              switch (readStep)
    402              {
    403          	  // start of the frame
    404                case Machine_SOF_STATE:
    405                  if (MONITOR_START_FRMAE == ch)
    406                    readStep = Machine_LEN_STATE;
    407                  break;
    408          	  // record length
    409                case Machine_LEN_STATE:
    410                  length = ch;
    411                  recvDataLen = 0;
    412                  pData = (byte*)osal_mem_alloc(length+5);
    413          		osal_memset(pData, 0x00, length+5);
    414                  if (NULL != pData)
    415                  {
    416          		  // record the length in pData
    417          		  pData[0] = length;
    418                    readStep = Machine_CMD1_STATE;
    419                  }
    420                  else
    421                  {
    422                    readStep = Machine_SOF_STATE;
    423                    return;
    424                  }
    425                  break;
    426          	  // record command
    427                case Machine_CMD1_STATE:
    428          		pData[1] = ch;
    429                  readStep = Machine_CMD2_STATE;
    430                  break;
    431                case Machine_CMD2_STATE:
    432                  pData[2] = ch;
    433          		readStep = Machine_DST1_STATE;
    434          		break;
    435          	  // record dst addr
    436          	  case Machine_DST1_STATE:
    437          		pData[3] = ch;
    438          		readStep = Machine_DST2_STATE;
    439          		break;
    440          	  case Machine_DST2_STATE:
    441          	  	pData[4] = ch;
    442                  if (0 != length)
    443                  {
    444                    readStep = Machine_DATA_STATE;
    445                  }
    446                  else
    447                  {
    448                    readStep = Machine_FCS_STATE;
    449                  }
    450                  break;
    451          	  // receive data
    452                case Machine_DATA_STATE:
    453          
    454                  /* Fill in the buffer the first byte of the data */
    455                  pData[5+recvDataLen++] = ch;
    456          
    457                  /* Check number of bytes left in the Rx buffer */
    458                  bytesInRxBuffer = Hal_UART_RxBufLen(UART_PORT);
    459          
    460                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    461                  if (bytesInRxBuffer <= length - recvDataLen)
    462                  {
    463                    HalUARTRead (UART_PORT, &pData[5+recvDataLen], bytesInRxBuffer);
    464                    recvDataLen += bytesInRxBuffer;
    465                  }
    466                  else
    467                  {
    468                    HalUARTRead (UART_PORT, &pData[5+recvDataLen], length - recvDataLen);
    469                    recvDataLen += (length - recvDataLen);
    470                  }
    471          
    472                  /* If number of bytes read is equal to data length, time to move on to FCS */
    473                  if ( recvDataLen == length )
    474                      readStep = Machine_FCS_STATE;
    475          
    476                  break;
    477          	  // check fcs
    478                case Machine_FCS_STATE:
    479                  fcs = ch;
    480                  /* Make sure it's correct */
    481                  if (Monitor_CalcFCS ((uint8*)pData, length+5) == fcs)
    482                  {
    483          		  // if this is the allow start command from pc
    484          		  // this allow the coordinator to ack start when
    485          		  // it's already start when the application from
    486          		  // pc is started. this is very flexiable for the 
    487          		  // user
    488          		  Monitor_ProcessMonitorIncomingData(pData);
    489          		}
    490                  else
    491                  {
    492                    /* deallocate the msg */
    493                    osal_mem_free ( (uint8 *)pData );
    494                  }
    495          		
    496                  /* Reset the readStep, send or discard the buffers at this point */
    497                  readStep = Machine_SOF_STATE;
    498               	break;
    499              }
    500          	// return to wait the send signal
    501          	if( 0 == Hal_UART_RxBufLen(UART_PORT) )
    502          	{
    503          	  // all data hava read out
    504            	  HalUARTWrite(UART_PORT, (byte*)ACK, 7);
   \                     ??Monitor_ProcessMonitorData_1:
   \   00000C                ; Setup parameters for call to function HalUARTWrite
   \   00000C   7C07         MOV     R4,#0x7
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7A..         MOV     R2,#ACK & 0xff
   \   000012   7B..         MOV     R3,#(ACK >> 8) & 0xff
   \   000014   7900         MOV     R1,#0x0
   \   000016   12....       LCALL   ??HalUARTWrite?relay
    505          	}else{
   \                     ??Monitor_ProcessMonitorData_0:
   \   000019                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000019   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??Monitor_ProcessMonitorData_2 & 0xFFFF
   \   000021                ; Setup parameters for call to function HalUARTRead
   \   000021   7C01         MOV     R4,#0x1
   \   000023   7D00         MOV     R5,#0x0
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   AA82         MOV     R2,DPL
   \   00002D   AB83         MOV     R3,DPH
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   ??HalUARTRead?relay
   \   000034   90....       MOV     DPTR,#readStep
   \   000037   E0           MOVX    A,@DPTR
   \   000038   602A         JZ      ??Monitor_ProcessMonitorData_3
   \   00003A   14           DEC     A
   \   00003B   603D         JZ      ??Monitor_ProcessMonitorData_4
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??Monitor_ProcessMonitorData_5 & 0xFFFF
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??Monitor_ProcessMonitorData_6 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??Monitor_ProcessMonitorData_7 & 0xFFFF
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??Monitor_ProcessMonitorData_8 & 0xFFFF
   \   000055   14           DEC     A
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??Monitor_ProcessMonitorData_9 & 0xFFFF
   \   00005B   14           DEC     A
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??Monitor_ProcessMonitorData_10 & 0xFFFF
   \   000061   02....       LJMP    ??Monitor_ProcessMonitorData_11 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_3:
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   64FE         XRL     A,#0xfe
   \   00006D   6003         JZ      $+5
   \   00006F   02....       LJMP    ??Monitor_ProcessMonitorData_11 & 0xFFFF
   \   000072   90....       MOV     DPTR,#readStep
   \   000075   7401         MOV     A,#0x1
   \   000077   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_4:
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   90....       MOV     DPTR,#length
   \   000084   F0           MOVX    @DPTR,A
   \   000085   90....       MOV     DPTR,#recvDataLen
   \   000088   E4           CLR     A
   \   000089   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   12....       LCALL   ??osal_mem_alloc?relay
   \   000094   90....       MOV     DPTR,#pData
   \   000097   EA           MOV     A,R2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   EB           MOV     A,R3
   \   00009B   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009E   FC           MOV     R4,A
   \   00009F   E4           CLR     A
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   FD           MOV     R5,A
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   12....       LCALL   ??osal_memset?relay
   \   0000A8   90....       MOV     DPTR,#pData
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   49           ORL     A,R1
   \   0000B2   6019         JZ      ??Monitor_ProcessMonitorData_13
   \   0000B4   90....       MOV     DPTR,#length
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C0E0         PUSH    A
   \   0000BA   90....       MOV     DPTR,#pData + 1
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F583         MOV     DPH,A
   \   0000C0   8882         MOV     DPL,R0
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   90....       MOV     DPTR,#readStep
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_13:
   \   0000CD   90....       MOV     DPTR,#readStep
   \   0000D0   E4           CLR     A
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   02....       LJMP    ??Monitor_ProcessMonitorData_2 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_5:
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   90....       MOV     DPTR,#readStep
   \   0000E7   7403         MOV     A,#0x3
   \   0000E9   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_6:
   \   0000EC   85..82       MOV     DPL,?XSP + 0
   \   0000EF   85..83       MOV     DPH,?XSP + 1
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F8   A3           INC     DPTR
   \   0000F9   D0E0         POP     A
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   90....       MOV     DPTR,#readStep
   \   0000FF   7404         MOV     A,#0x4
   \   000101   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_7:
   \   000104   85..82       MOV     DPL,?XSP + 0
   \   000107   85..83       MOV     DPH,?XSP + 1
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   C0E0         PUSH    A
   \   00010D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000110   D0E0         POP     A
   \   000112   F0           MOVX    @DPTR,A
   \   000113   90....       MOV     DPTR,#readStep
   \   000116   7405         MOV     A,#0x5
   \   000118   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_8:
   \   00011B   85..82       MOV     DPL,?XSP + 0
   \   00011E   85..83       MOV     DPH,?XSP + 1
   \   000121   E0           MOVX    A,@DPTR
   \   000122   C0E0         PUSH    A
   \   000124   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000127   A3           INC     DPTR
   \   000128   D0E0         POP     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   90....       MOV     DPTR,#length
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   607A         JZ      ??Monitor_ProcessMonitorData_14
   \   000131   90....       MOV     DPTR,#readStep
   \   000134   7406         MOV     A,#0x6
   \   000136   02....       LJMP    ??Monitor_ProcessMonitorData_12 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_9:
   \   000139   85..82       MOV     DPL,?XSP + 0
   \   00013C   85..83       MOV     DPH,?XSP + 1
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   C0E0         PUSH    A
   \   000142   90....       MOV     DPTR,#recvDataLen
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F8           MOV     R0,A
   \   000147   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   90....       MOV     DPTR,#recvDataLen
   \   000150   E0           MOVX    A,@DPTR
   \   000151   04           INC     A
   \   000152   F0           MOVX    @DPTR,A
   \   000153                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000153   7900         MOV     R1,#0x0
   \   000155   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000158   EA           MOV     A,R2
   \   000159   FE           MOV     R6,A
   \   00015A   90....       MOV     DPTR,#length
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F8           MOV     R0,A
   \   00015F   90....       MOV     DPTR,#recvDataLen
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FA           MOV     R2,A
   \   000164   E8           MOV     A,R0
   \   000165   C3           CLR     C
   \   000166   9A           SUBB    A,R2
   \   000167   F8           MOV     R0,A
   \   000168   95E0         SUBB    A,0xE0 /* A   */
   \   00016A   F9           MOV     R1,A
   \   00016B   8E..         MOV     ?V0 + 0,R6
   \   00016D   C3           CLR     C
   \   00016E   E8           MOV     A,R0
   \   00016F   95..         SUBB    A,?V0 + 0
   \   000171   E9           MOV     A,R1
   \   000172   9400         SUBB    A,#0x0
   \   000174   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000176   65D0         XRL     A,PSW
   \   000178   33           RLC     A
   \   000179   4010         JC      ??Monitor_ProcessMonitorData_15
   \   00017B                ; Setup parameters for call to function HalUARTRead
   \   00017B   AC..         MOV     R4,?V0 + 0
   \   00017D   7D00         MOV     R5,#0x0
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F8           MOV     R0,A
   \   000181   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000184   90....       MOV     DPTR,#recvDataLen
   \   000187   E0           MOVX    A,@DPTR
   \   000188   2E           ADD     A,R6
   \   000189   8016         SJMP    ??Monitor_ProcessMonitorData_16
   \                     ??Monitor_ProcessMonitorData_15:
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D                ; Setup parameters for call to function HalUARTRead
   \   00018D   90....       MOV     DPTR,#length
   \   000190   E0           MOVX    A,@DPTR
   \   000191   C3           CLR     C
   \   000192   98           SUBB    A,R0
   \   000193   FC           MOV     R4,A
   \   000194   95E0         SUBB    A,0xE0 /* A   */
   \   000196   FD           MOV     R5,A
   \   000197   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00019A   90....       MOV     DPTR,#length
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   90....       MOV     DPTR,#recvDataLen
   \                     ??Monitor_ProcessMonitorData_16:
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F8           MOV     R0,A
   \   0001A4   90....       MOV     DPTR,#length
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   68           XRL     A,R0
   \   0001A9   703D         JNZ     ??Monitor_ProcessMonitorData_11
   \                     ??Monitor_ProcessMonitorData_14:
   \   0001AB   90....       MOV     DPTR,#readStep
   \   0001AE   7407         MOV     A,#0x7
   \   0001B0   8035         SJMP    ??Monitor_ProcessMonitorData_12
   \                     ??Monitor_ProcessMonitorData_10:
   \   0001B2   85..82       MOV     DPL,?XSP + 0
   \   0001B5   85..83       MOV     DPH,?XSP + 1
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   90....       MOV     DPTR,#fcs
   \   0001BC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001BF   F9           MOV     R1,A
   \   0001C0   90....       MOV     DPTR,#pData
   \   0001C3   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001C6   12....       LCALL   ??Monitor_CalcFCS?relay
   \   0001C9   E9           MOV     A,R1
   \   0001CA   F8           MOV     R0,A
   \   0001CB   90....       MOV     DPTR,#fcs
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   68           XRL     A,R0
   \   0001D0   90....       MOV     DPTR,#pData
   \   0001D3   7008         JNZ     ??Monitor_ProcessMonitorData_17
   \   0001D5                ; Setup parameters for call to function Monitor_ProcessMonitorIncomingData
   \   0001D5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001D8   12....       LCALL   ??Monitor_ProcessMonitorIncomingData?relay
   \   0001DB   8006         SJMP    ??Monitor_ProcessMonitorData_18
   \                     ??Monitor_ProcessMonitorData_17:
   \   0001DD                ; Setup parameters for call to function osal_mem_free
   \   0001DD   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001E0   12....       LCALL   ??osal_mem_free?relay
   \                     ??Monitor_ProcessMonitorData_18:
   \   0001E3   90....       MOV     DPTR,#readStep
   \   0001E6   E4           CLR     A
   \                     ??Monitor_ProcessMonitorData_12:
   \   0001E7   F0           MOVX    @DPTR,A
   \                     ??Monitor_ProcessMonitorData_11:
   \   0001E8                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   0001E8   12....       LCALL   ?Subroutine11 & 0xFFFF
    506          	  break;	// get out the loop
    507          	}
    508            }// read all data
   \                     ??CrossCallReturnLabel_16:
   \   0001EB   7003         JNZ     $+5
   \   0001ED   02....       LJMP    ??Monitor_ProcessMonitorData_1 & 0xFFFF
   \                     ??Monitor_ProcessMonitorData_2:
   \   0001F0   7401         MOV     A,#0x1
   \   0001F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F5                REQUIRE ?Subroutine3
   \   0001F5                ; // Fall through to label ?Subroutine3
    509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pData
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   7900         MOV     R1,#0x0
   \   000009   12....       LCALL   ??HalUARTRead?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#pData
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3400         ADDC    A,#0x0
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   F583         MOV     DPH,A
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function Monitor_CalcFCS
   \   000001   90....       MOV     DPTR,#length
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2405         ADD     A,#0x5
   \   000007   22           RET
    510          
    511          /*********************************************************************
    512           *
    513           * @fn	Monitor_ProcessMonitorIncomingData
    514           *
    515           *
    516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          void Monitor_ProcessMonitorIncomingData(byte* pData)
   \                     Monitor_ProcessMonitorIncomingData:
    518          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    519            // get the cluster first
    520            uint16 clusterID = BUILD_UINT16(pData[1], pData[2]);
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   EA           MOV     A,R2
   \   000013   2400         ADD     A,#0x0
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   F5..         MOV     ?V0 + 1,A
    521            // record the AF status
    522            uint8 sendResult = afStatus_FAILED;
    523            
    524            // send the message
    525            if( START_CMD == clusterID )
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V0 + 1
   \   00001E   702E         JNZ     ??Monitor_ProcessMonitorIncomingData_0
    526            {
    527          	// also need to send the topology information
    528          	Monitor_SendTopologyInformation();
   \   000020                ; Setup parameters for call to function Monitor_SendTopologyInformation
   \   000020   12....       LCALL   ??Monitor_SendTopologyInformation?relay
    529          	// boadcast the toporequest
    530            	Monitor_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   12....       LCALL   ?Subroutine4 & 0xFFFF
    531            	Monitor_DstAddr.addr.shortAddr = 0xFFFF;
    532          	// broadcast
    533          	sendResult = AF_DataRequest(	&Monitor_DstAddr, 
    534          				    				&Monitor_epDesc,
    535          									TOPO_REQ,
    536          									0,
    537          									(byte*)NULL,
    538          									&Monitor_TransID,
    539          									AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_21:
   \   000026                ; Setup parameters for call to function AF_DataRequest
   \   000026   75..1E       MOV     ?V0 + 0,#0x1e
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0 + 0,#Monitor_TransID & 0xff
   \   000031   75....       MOV     ?V0 + 1,#(Monitor_TransID >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   F5..         MOV     ?V0 + 1,A
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..0A       MOV     ?V0 + 0,#0xa
   \   00004B   02....       LJMP    ??Monitor_ProcessMonitorIncomingData_1 & 0xFFFF
    540          	
    541            }
    542            else if((DATA_ALLOW == clusterID) || (DATA_REFUSE == clusterID))
   \                     ??Monitor_ProcessMonitorIncomingData_0:
   \   00004E   740E         MOV     A,#0xe
   \   000050   65..         XRL     A,?V0 + 0
   \   000052   7001         JNZ     ??Monitor_ProcessMonitorIncomingData_2
   \   000054   E9           MOV     A,R1
   \                     ??Monitor_ProcessMonitorIncomingData_2:
   \   000055   6009         JZ      ??Monitor_ProcessMonitorIncomingData_3
   \   000057   740F         MOV     A,#0xf
   \   000059   65..         XRL     A,?V0 + 0
   \   00005B   7001         JNZ     ??Monitor_ProcessMonitorIncomingData_4
   \   00005D   E9           MOV     A,R1
   \                     ??Monitor_ProcessMonitorIncomingData_4:
   \   00005E   7022         JNZ     ??Monitor_ProcessMonitorIncomingData_5
    543            {
    544          	// this is mainly for the vibrate when receiving camera data
    545          	// boadcast the toporequest
    546            	Monitor_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??Monitor_ProcessMonitorIncomingData_3:
   \   000060   12....       LCALL   ?Subroutine4 & 0xFFFF
    547            	Monitor_DstAddr.addr.shortAddr = 0xFFFF;
    548          	// broadcast
    549          	sendResult = AF_DataRequest(	&Monitor_DstAddr, 
    550          									&Monitor_epDesc,
    551          									clusterID,
    552          									0,
    553          									(byte*)NULL,
    554          									&Monitor_TransID,
    555          									AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_22:
   \   000063                ; Setup parameters for call to function AF_DataRequest
   \   000063   75..1E       MOV     ?V0 + 2,#0x1e
   \   000066   78..         MOV     R0,#?V0 + 2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006B   75....       MOV     ?V0 + 2,#Monitor_TransID & 0xff
   \   00006E   75....       MOV     ?V0 + 3,#(Monitor_TransID >> 8) & 0xff
   \   000071   78..         MOV     R0,#?V0 + 2
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   E4           CLR     A
   \   000077   F5..         MOV     ?V0 + 2,A
   \   000079   F5..         MOV     ?V0 + 3,A
   \   00007B   78..         MOV     R0,#?V0 + 2
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   8047         SJMP    ??Monitor_ProcessMonitorIncomingData_6
    556            }
    557            else
    558            {
    559          	// set dst use point to point transmit
    560            	Monitor_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??Monitor_ProcessMonitorIncomingData_5:
   \   000082   90....       MOV     DPTR,#Monitor_DstAddr + 8
   \   000085   7402         MOV     A,#0x2
   \   000087   F0           MOVX    @DPTR,A
    561            	Monitor_DstAddr.addr.shortAddr = BUILD_UINT16(pData[3], pData[4]);
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   EA           MOV     A,R2
   \   000096   90....       MOV     DPTR,#Monitor_DstAddr
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E9           MOV     A,R1
   \   00009C   F0           MOVX    @DPTR,A
    562          	
    563          	// send to the dst node
    564            	sendResult = AF_DataRequest(	&Monitor_DstAddr, 
    565          									&Monitor_epDesc,
    566          									clusterID,
    567          									pData[0],
    568          									(byte*)&pData[5],
    569          									&Monitor_TransID,
    570          									AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \   00009D                ; Setup parameters for call to function AF_DataRequest
   \   00009D   75..1E       MOV     ?V0 + 2,#0x1e
   \   0000A0   78..         MOV     R0,#?V0 + 2
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A5   75....       MOV     ?V0 + 2,#Monitor_TransID & 0xff
   \   0000A8   75....       MOV     ?V0 + 3,#(Monitor_TransID >> 8) & 0xff
   \   0000AB   78..         MOV     R0,#?V0 + 2
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2405         ADD     A,#0x5
   \   0000B3   F5..         MOV     ?V0 + 2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F5..         MOV     ?V0 + 3,A
   \   0000BA   78..         MOV     R0,#?V0 + 2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F5..         MOV     ?V0 + 2,A
   \   0000C6   75..00       MOV     ?V0 + 3,#0x0
   \                     ??Monitor_ProcessMonitorIncomingData_6:
   \   0000C9   78..         MOV     R0,#?V0 + 2
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \                     ??Monitor_ProcessMonitorIncomingData_1:
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   7920         MOV     R1,#0x20
   \   0000D5   7C..         MOV     R4,#Monitor_epDesc & 0xff
   \   0000D7   7D..         MOV     R5,#(Monitor_epDesc >> 8) & 0xff
   \   0000D9   7A..         MOV     R2,#Monitor_DstAddr & 0xff
   \   0000DB   7B..         MOV     R3,#(Monitor_DstAddr >> 8) & 0xff
   \   0000DD   12....       LCALL   ??AF_DataRequest?relay
   \   0000E0   7409         MOV     A,#0x9
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   E9           MOV     A,R1
    571            }
    572            // check if need to resend the message
    573            if( afStatus_SUCCESS == sendResult ){
   \   0000E6   6030         JZ      ??Monitor_ProcessMonitorIncomingData_7
    574          	// nothing to do
    575          	
    576            }else{
    577          	// copy the message to the resend memory
    578          	osal_memcpy((byte*)resendBuffer, pData, pData[0]);
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   8E..         MOV     ?V0 + 0,R6
   \   0000EA   8F..         MOV     ?V0 + 1,R7
   \   0000EC   75..00       MOV     ?V0 + 2,#0x0
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   FC           MOV     R4,A
   \   0000FA   7D00         MOV     R5,#0x0
   \   0000FC   7A..         MOV     R2,#resendBuffer & 0xff
   \   0000FE   7B..         MOV     R3,#(resendBuffer >> 8) & 0xff
   \   000100   12....       LCALL   ??osal_memcpy?relay
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
    579          	// here resend
    580          	osal_start_timerEx( Monitor_TaskID, MONITOR_RESEND_EVT, MONITOR_RESEND_DELAY );
   \   000108                ; Setup parameters for call to function osal_start_timerEx
   \   000108   7C0A         MOV     R4,#0xa
   \   00010A   7D00         MOV     R5,#0x0
   \   00010C   7A02         MOV     R2,#0x2
   \   00010E   7B00         MOV     R3,#0x0
   \   000110   90....       MOV     DPTR,#Monitor_TaskID
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F9           MOV     R1,A
   \   000115   12....       LCALL   ??osal_start_timerEx?relay
    581            }
    582            // realease the memory
    583            osal_mem_free ((byte*)pData);
   \                     ??Monitor_ProcessMonitorIncomingData_7:
   \   000118                ; Setup parameters for call to function osal_mem_free
   \   000118   EE           MOV     A,R6
   \   000119   FA           MOV     R2,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FB           MOV     R3,A
   \   00011C   12....       LCALL   ??osal_mem_free?relay
    584          }
   \   00011F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#Monitor_DstAddr + 8
   \   000003   740F         MOV     A,#0xf
   \   000005                REQUIRE ??Subroutine14_0
   \   000005                ; // Fall through to label ??Subroutine14_0
    585          
    586          /*********************************************************************
    587           * @fn		Monitor_SendTopologyInformation
    588           *
    589           * @brief	send the topology information to the the coordinator
    590           *
    591           *	| SOF  | LEN  |  CMD |  CMD2  | SRC  |  SRC |  DATA  | FCS  |
    592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          static void Monitor_SendTopologyInformation()
   \                     Monitor_SendTopologyInformation:
    594          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 11
   \   000004   74F5         MOV     A,#-0xb
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    595            // Create frame buffer
    596            byte pFrame[11];
    597            // fill SOF
    598            pFrame[0] = 0xFE;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   F0           MOVX    @DPTR,A
    599            // fill len
    600            pFrame[1] = 0x0004;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7404         MOV     A,#0x4
   \   000019   F0           MOVX    @DPTR,A
    601            // file CMD
    602            pFrame[2] = LO_UINT16(TOPOLOGY_CMD);
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
    603            pFrame[3] = HI_UINT16(TOPOLOGY_CMD);
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
    604            // file source address
    605            pFrame[4] = LO_UINT16(0);
   \   000029   7404         MOV     A,#0x4
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    606            pFrame[5] = HI_UINT16(0);
   \   000030   7405         MOV     A,#0x5
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    607            // fill type
    608            pFrame[6] = LO_UINT16(COORDINATOR);
   \   000037   7406         MOV     A,#0x6
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
    609            pFrame[7] = HI_UINT16(COORDINATOR);
   \   00003F   7407         MOV     A,#0x7
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    610            // file parent
    611            pFrame[8] = LO_UINT16(0);
   \   000046   7408         MOV     A,#0x8
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
    612            pFrame[9] = HI_UINT16(0);
   \   00004D   7409         MOV     A,#0x9
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E4           CLR     A
   \   000053   F0           MOVX    @DPTR,A
    613            // fill fcs
    614            pFrame[10] = Monitor_CalcFCS((byte*)&pFrame[1], 9);
   \   000054                ; Setup parameters for call to function Monitor_CalcFCS
   \   000054   7909         MOV     R1,#0x9
   \   000056   04           INC     A
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??Monitor_CalcFCS?relay
   \   000061   740A         MOV     A,#0xa
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E9           MOV     A,R1
   \   000067   F0           MOVX    @DPTR,A
    615            // send out use uart
    616            HalUARTWrite(UART_PORT, pFrame, 11);
   \   000068                ; Setup parameters for call to function HalUARTWrite
   \   000068   7C0B         MOV     R4,#0xb
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   AA82         MOV     R2,DPL
   \   000074   AB83         MOV     R3,DPH
   \   000076   7900         MOV     R1,#0x0
   \   000078   12....       LCALL   ??HalUARTWrite?relay
    617          }
   \   00007B   740B         MOV     A,#0xb
   \   00007D   02....       LJMP    ?Subroutine2 & 0xFFFF
    618          
    619          /*********************************************************************
    620           * @fn      Monitor_CalcFCS
    621           *
    622           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    623           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    624           *
    625           * @param   byte *msg_ptr - message pointer
    626           * @param   byte len - length (in bytes) of message
    627           *
    628           * @return  result byte
    629           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          byte Monitor_CalcFCS( uint8 *msg_ptr, uint8 len )
   \                     Monitor_CalcFCS:
    631          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    632            byte x;
    633            byte xorResult = 0x00;
   \   000007   7900         MOV     R1,#0x0
    634          
    635            for ( x=0; x<len; x++ )
   \   000009   7800         MOV     R0,#0x0
   \   00000B   8011         SJMP    ??Monitor_CalcFCS_0
    636              xorResult ^=  msg_ptr[x];
   \                     ??Monitor_CalcFCS_1:
   \   00000D   88..         MOV     ?V0 + 0,R0
   \   00000F   EA           MOV     A,R2
   \   000010   25..         ADD     A,?V0 + 0
   \   000012   F582         MOV     DPL,A
   \   000014   EB           MOV     A,R3
   \   000015   3400         ADDC    A,#0x0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C9           XCH     A,R1
   \   00001B   69           XRL     A,R1
   \   00001C   F9           MOV     R1,A
   \   00001D   08           INC     R0
   \                     ??Monitor_CalcFCS_0:
   \   00001E   E8           MOV     A,R0
   \   00001F   C3           CLR     C
   \   000020   9C           SUBB    A,R4
   \   000021   40EA         JC      ??Monitor_CalcFCS_1
    637          
    638            return ( xorResult );
   \   000023   02....       LJMP    ?Subroutine3 & 0xFFFF
    639          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WirelessMonitorSystem_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WirelessMonitorSystem_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WirelessMonitorSystem_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WirelessMonitorSystem_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_UartCallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_UartCallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_ProcessMonitorData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_ProcessMonitorData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_ProcessMonitorIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_ProcessMonitorIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_SendTopologyInformation?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_SendTopologyInformation

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Monitor_CalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Monitor_CalcFCS
    640          /*********************************************************************
    641           */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Monitor_CalcFCS                    0      0     21
     Monitor_ProcessMonitorData         1      0     23
       -> HalUARTWrite                  0      0     22
       -> Hal_UART_RxBufLen             0      0     22
       -> HalUARTRead                   0      0     22
       -> osal_mem_alloc                0      0     22
       -> osal_memset                   0      0     22
       -> Hal_UART_RxBufLen             0      0     22
       -> HalUARTRead                   0      0     22
       -> HalUARTRead                   0      0     22
       -> Monitor_CalcFCS               0      0     22
       -> Monitor_ProcessMonitorIncomingData
                                        0      0     22
       -> osal_mem_free                 0      0     22
       -> Hal_UART_RxBufLen             0      0     22
     Monitor_ProcessMonitorIncomingData
                                        0      0     33
       -> Monitor_SendTopologyInformation
                                        0      0     24
       -> AF_DataRequest                0      0     42
       -> AF_DataRequest                0      0     42
       -> AF_DataRequest                0      0     42
       -> osal_memcpy                   0      0     30
       -> osal_start_timerEx            0      0     24
       -> osal_mem_free                 0      0     24
     Monitor_SendTopologyInformation
                                        3      0     23
       -> Monitor_CalcFCS               4      0     22
       -> HalUARTWrite                  4      0     22
     Monitor_UartCallBack               0      0      9
       -> Monitor_ProcessMonitorData
                                        0      0     18
     Monitor_UartInit                   2      0     38
       -> HalUARTOpen                   4      0     58
     WirelessMonitorSystem_Init         0      0      9
       -> Monitor_UartInit              0      0     18
       -> afRegister                    0      0     18
     WirelessMonitorSystem_ProcessEvent
                                        0      0     12
       -> osal_msg_receive              0      0     24
       -> HalUARTWrite                  0      0     24
       -> Monitor_SendTopologyInformation
                                        0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> HalUARTWrite                  0      0     24
       -> Monitor_ProcessMonitorData
                                        0      0     24
       -> Monitor_ProcessMonitorIncomingData
                                        0      0     24


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     ACK                                           7
     Monitor_ClusterInList                         2
     Monitor_ClusterOutList                       20
     Monitor_SimpleDesc                           12
     Monitor_epDesc                                6
     Monitor_TaskID                                1
     Monitor_TransID                               1
     Monitor_NwkState                              1
     Monitor_DstAddr                              12
     readStep                                      1
     length                                        1
     fcs                                           1
     recvDataLen                                   1
     pData                                         2
     resendBuffer                                128
     WirelessMonitorSystem_Init                   68
     ?Subroutine0                                  5
     ??Subroutine14_0                             10
     WirelessMonitorSystem_ProcessEvent
                                                 202
     ?Subroutine1                                  5
     Monitor_UartInit                            107
     ?Subroutine2                                 10
     Monitor_UartCallBack                         18
     Monitor_ProcessMonitorData                  501
     ?Subroutine3                                  5
     ?Subroutine11                                11
     ?Subroutine9                                  4
     ?Subroutine13                                13
     ?Subroutine8                                  6
     ?Subroutine7                                  6
     ?Subroutine6                                 13
     ?Subroutine12                                20
     ?Subroutine5                                  8
     Monitor_ProcessMonitorIncomingData
                                                 290
     ?Subroutine10                                10
     ?Subroutine4                                  5
     Monitor_SendTopologyInformation
                                                 128
     Monitor_CalcFCS                              38
     ??WirelessMonitorSystem_Init?relay            6
     ??WirelessMonitorSystem_ProcessEvent?relay    6
     ??Monitor_UartInit?relay                      6
     ??Monitor_UartCallBack?relay                  6
     ??Monitor_ProcessMonitorData?relay            6
     ??Monitor_ProcessMonitorIncomingData?relay    6
     ??Monitor_SendTopologyInformation?relay       6
     ??Monitor_CalcFCS?relay                       6

 
 1 483 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    41 bytes in segment XDATA_ROM_C
   155 bytes in segment XDATA_Z
 
 1 531 bytes of CODE  memory
    41 bytes of CONST memory
   155 bytes of XDATA memory

Errors: none
Warnings: none

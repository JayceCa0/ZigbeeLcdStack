///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jul/2015  13:43:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\Source\LCD /
//                          .c                                                /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"          /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\T /
//                          ools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO         /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=500        /
//                          -DQUEUED_POLL_RATE=30 -DRESPONSE_POLL_RATE=100)   /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\Source\LCD.c" -D    /
//                          HAL_UART -lC "C:\Texas Instruments\ZStack-CC2530- /
//                          2.5.1a\Projects\zstack\Samples\WirelessMonitorSys /
//                          tem\CC2530DB\LCD\List\" -lA "C:\Texas             /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\LCD\List\" /
//                           --diag_suppress Pe001,Pa010 -o "C:\Texas         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\LCD\Obj\"  /
//                          -e --no_cse --no_unroll --no_inline               /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\" -I       /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\Source\" -I "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\Z /
//                          Main\TI2530DB\" -I "C:\Texas                      /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\include\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\target\CC2530EB\" -I          /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\include\" -I        /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\low_level\srf04\"   /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\..\..\Components\mac\low_level\srf04\ /
//                          single_chip\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\mt\" -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\osal\include\" -I "C:\Texas       /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\saddr\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\sdata\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\af\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\nwk\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sapi\" -I "C:\Texas         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sec\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sys\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\zdo\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\" -I "C:\Texas               /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\" -On                    /
//                          --require_prototypes                              /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\CC2530DB\L /
//                          CD\List\LCD.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??LCD_BuildScreenFrame?relay,0203H
        FUNCTION ??LCD_CalcFCS?relay,0203H
        FUNCTION ??LCD_InitMessageQueue?relay,0203H
        FUNCTION ??LCD_IsMessageEmpty?relay,0203H
        FUNCTION ??LCD_Loading?relay,0203H
        FUNCTION ??LCD_MessageMSGCB?relay,0203H
        FUNCTION ??LCD_PopMessage?relay,0203H
        FUNCTION ??LCD_PushMessage?relay,0203H
        FUNCTION ??LCD_RoomPlate?relay,0203H
        FUNCTION ??LCD_SendACK?relay,0203H
        FUNCTION ??LCD_SendOneMessage?relay,0203H
        FUNCTION ??LCD_SendRetry?relay,0203H
        FUNCTION ??LCD_SendTopoInformation?relay,0203H
        FUNCTION ??LCD_UartCallBack?relay,0203H
        FUNCTION ??LCD_UartInit?relay,0203H
        PUBLIC ??WirelessMonitorSystem_Init?relay
        FUNCTION ??WirelessMonitorSystem_Init?relay,0203H
        PUBLIC ??WirelessMonitorSystem_ProcessEvent?relay
        FUNCTION ??WirelessMonitorSystem_ProcessEvent?relay,0203H
        FUNCTION ??copyExtAddr?relay,0203H
        FUNCTION LCD_BuildScreenFrame,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION LCD_CalcFCS,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC LCD_ClusterInList
        PUBLIC LCD_ClusterOutList
        PUBLIC LCD_DstAddr
        FUNCTION LCD_InitMessageQueue,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION LCD_IsMessageEmpty,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION LCD_Loading,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 7, STACK
        FUNCTION LCD_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC LCD_NwkState
        FUNCTION LCD_PopMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION LCD_PushMessage,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION LCD_RoomPlate,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 7, STACK
        FUNCTION LCD_SendACK,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        FUNCTION LCD_SendOneMessage,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION LCD_SendRetry,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION LCD_SendTopoInformation,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC LCD_SimpleDesc
        PUBLIC LCD_TaskID
        PUBLIC LCD_TransID
        FUNCTION LCD_UartCallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION LCD_UartInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC LCD_epDesc
        PUBLIC WirelessMonitorSystem_Init
        FUNCTION WirelessMonitorSystem_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WirelessMonitorSystem_ProcessEvent
        FUNCTION WirelessMonitorSystem_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC classReg
        FUNCTION copyExtAddr,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC courseReg
        PUBLIC peopleReg
        PUBLIC roomReg
        PUBLIC teacherReg
        PUBLIC timeReg
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_memcpy         SYMBOL "osal_memcpy"
osal_mem_free       SYMBOL "osal_mem_free"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTOpen         SYMBOL "HalUARTOpen"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
WirelessMonitorSystem_Init SYMBOL "WirelessMonitorSystem_Init"
??WirelessMonitorSystem_Init?relay SYMBOL "?relay", WirelessMonitorSystem_Init
WirelessMonitorSystem_ProcessEvent SYMBOL "WirelessMonitorSystem_ProcessEvent"
??WirelessMonitorSystem_ProcessEvent?relay SYMBOL "?relay", WirelessMonitorSystem_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\WirelessMonitorSystem\Source\LCD.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 
//   10 #include "WirelessMonitorSystem.h"
//   11 #include "DebugTrace.h"
//   12 
//   13 #if !defined( WIN32 )
//   14   #include "OnBoard.h"
//   15 #endif
//   16 
//   17 /* HAL */
//   18 #include "hal_uart.h"
//   19 
//   20 /*********************************************************************
//   21  * MACROS
//   22  */
//   23 // Cluster number for LCD
//   24 #define LCD_MAX_IN_CLUSTERS 	7
//   25 #define LCD_MAX_OUT_CLUSTERS	1
//   26 
//   27 // ACK command
//   28 #define LCD_ACK_CMD 	0xFFFE
//   29 #define LCD_RETRY_CMD	0xFFFD
//   30 
//   31 /*********************************************************************
//   32  * TYPEDEFS
//   33  */
//   34 typedef struct{
//   35   byte data[64];
//   36   byte len;
//   37 }MessageNode;
//   38 
//   39 /*********************************************************************
//   40  * GLOBAL VARIABLES
//   41  */
//   42 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   43 const cId_t LCD_ClusterInList[LCD_MAX_IN_CLUSTERS] =
LCD_ClusterInList:
        DATA16
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 10
        DW 13
//   44 {
//   45   LCD_SUBJECT_CMD,			
//   46   LCD_CLASS_CMD,				
//   47   LCD_TEACHER_CMD,				
//   48   LCD_PEOPLE_CMD,				
//   49   LCD_TIME_CMD,
//   50   TOPO_REQ,
//   51   ROOM_CMD
//   52 };
//   53 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   54 const cId_t LCD_ClusterOutList[LCD_MAX_OUT_CLUSTERS] =
LCD_ClusterOutList:
        DW 11
//   55 {
//   56   ZIGBEE_COMMON_CLUSTER
//   57 };
//   58 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   59 const SimpleDescriptionFormat_t LCD_SimpleDesc =
LCD_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 7
        DATA16
        DW LCD_ClusterInList
        DATA8
        DB 1
        DATA16
        DW LCD_ClusterOutList
//   60 {
//   61   Monitor_ENDPOINT,              //  int Endpoint;
//   62   Monitor_PROFID,                //  uint16 AppProfId[2];
//   63   Monitor_DEVICEID,              //  uint16 AppDeviceId[2];
//   64   Monitor_DEVICE_VERSION,        //  int   AppDevVer:4;
//   65   Monitor_FLAGS,                 //  int   AppFlags:4;
//   66   LCD_MAX_IN_CLUSTERS,           //  byte  AppNumInClusters;
//   67   (cId_t *)LCD_ClusterInList, //  byte *pAppInClusterList;
//   68   LCD_MAX_OUT_CLUSTERS,          //  byte  AppNumOutClusters;
//   69   (cId_t *)LCD_ClusterOutList //  byte *pAppOutClusterList;
//   70 };
//   71 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 endPointDesc_t LCD_epDesc;
LCD_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL VARIABLES
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL FUNCTIONS
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * LOCAL VARIABLES
//   84  */
//   85 /**************************** OSAL *********************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 byte LCD_TaskID;    // Task ID for internal task/event processing
LCD_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 byte LCD_TransID;  // This is the unique message ID (counter)
LCD_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   89 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   90 devStates_t LCD_NwkState;
LCD_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   91 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 afAddrType_t LCD_DstAddr;	
LCD_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 /***************************** screen parameters ******************/
//   95 // here hold the message and send to the LCD

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 static byte pHeader = 0;
pHeader:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 static byte pTail = 0;
pTail:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 static MessageNode messageArray[12];
messageArray:
        DS 780
        REQUIRE __INIT_XDATA_Z
//   99 
//  100 // state for the ack flag

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 static byte ackFlag = 0;
ackFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 static byte shiftToRoomInformation = 0;
shiftToRoomInformation:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  103 // list for lcd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  104 const uint16 roomReg = 		0x0010;
roomReg:
        DW 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  105 const uint16 courseReg = 	0x0020;
courseReg:
        DW 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  106 const uint16 teacherReg = 	0x0040;
teacherReg:
        DW 64

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  107 const uint16 classReg	= 	0x0050;
classReg:
        DW 80

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  108 const uint16 peopleReg = 	0x0070;
peopleReg:
        DW 112

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  109 const uint16 timeReg = 		0x0080;
timeReg:
        DW 128
//  110 
//  111 /*********************************************************************
//  112  * LOCAL FUNCTIONS
//  113  */
//  114 static void LCD_Loading( void );
//  115 static void LCD_RoomPlate( void );
//  116 static void LCD_UartInit( void );
//  117 static void LCD_SendRetry( void );
//  118 static void LCD_SendACK( byte flag );
//  119 static void LCD_SendTopoInformation( void );
//  120 static void copyExtAddr(byte* src, byte* dst);
//  121 static byte LCD_CalcFCS( uint8 *msg_ptr, uint8 len );
//  122 static void LCD_UartCallBack( uint8 port, uint8 event );
//  123 static void LCD_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  124 static void LCD_BuildScreenFrame(uint8* gbk, uint8 len, uint16 reg);
//  125 
//  126 // hold for the queue
//  127 static void LCD_InitMessageQueue( void );
//  128 static void LCD_PushMessage( byte* str, byte len );
//  129 static MessageNode* LCD_PopMessage( void );
//  130 static byte LCD_IsMessageEmpty( void );
//  131 
//  132 // send one message to the lcd
//  133 static void LCD_SendOneMessage( void );
//  134 
//  135 /*********************************************************************
//  136  * @fn      LCD_Init
//  137  *
//  138  * @brief   Initialization function for the Sensor App Task.
//  139  *          This is called during initialization and should contain
//  140  *          any application specific initialization (ie. hardware
//  141  *          initialization/setup, table initialization, power up
//  142  *          notificaiton ... ).
//  143  *
//  144  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  145  *                    used to send messages and set timers.
//  146  *
//  147  * @return  none
//  148  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  149 void WirelessMonitorSystem_Init( uint8 task_id )
WirelessMonitorSystem_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function WirelessMonitorSystem_Init
        CODE
//  150 {
        FUNCALL WirelessMonitorSystem_Init, LCD_InitMessageQueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_Init, LCD_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  151   // Init the Stack
//  152   LCD_TaskID = task_id;
        MOV     DPTR,#LCD_TaskID
        MOVX    @DPTR,A
//  153   LCD_NwkState = DEV_INIT;
        MOV     DPTR,#LCD_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  154   LCD_TransID = 0;
        MOV     DPTR,#LCD_TransID
        MOV     A,#0x0
        MOVX    @DPTR,A
//  155 	
//  156   // Init the LCD state
//  157   ackFlag = 0;
        MOV     DPTR,#ackFlag
        MOV     A,#0x0
        MOVX    @DPTR,A
//  158   shiftToRoomInformation = 0;
        MOV     DPTR,#shiftToRoomInformation
        MOV     A,#0x0
        MOVX    @DPTR,A
//  159   // init the queue
//  160   LCD_InitMessageQueue();
        ; Setup parameters for call to function LCD_InitMessageQueue
        LCALL   ??LCD_InitMessageQueue?relay
//  161   
//  162   // Init the uart for the LCD
//  163   LCD_UartInit();
        ; Setup parameters for call to function LCD_UartInit
        LCALL   ??LCD_UartInit?relay
//  164 
//  165   // init destination address
//  166   LCD_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#LCD_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  167   LCD_DstAddr.endPoint = Monitor_ENDPOINT;
        MOV     DPTR,#LCD_DstAddr + 9
        MOV     A,#0xa
        MOVX    @DPTR,A
//  168   LCD_DstAddr.addr.shortAddr = 0x0000;		// coordinator
        MOV     DPTR,#LCD_DstAddr
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  169 	
//  170   // Fill out the endpoint description.
//  171   LCD_epDesc.endPoint = Monitor_ENDPOINT;
        MOV     DPTR,#LCD_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  172   LCD_epDesc.task_id = &LCD_TaskID;
        MOV     DPTR,#LCD_epDesc + 1
        MOV     A,#LCD_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(LCD_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  173   LCD_epDesc.simpleDesc
//  174             = (SimpleDescriptionFormat_t *)&LCD_SimpleDesc;
        MOV     DPTR,#LCD_epDesc + 3
        MOV     A,#LCD_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(LCD_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  175   LCD_epDesc.latencyReq = noLatencyReqs;
        MOV     DPTR,#LCD_epDesc + 5
        MOV     A,#0x0
        MOVX    @DPTR,A
//  176 
//  177   // Register the endpoint description with the AF
//  178   afRegister( &LCD_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#LCD_epDesc & 0xff
        MOV     R3,#(LCD_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
        MOV     A,R1
//  179 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  180 
//  181 /*********************************************************************
//  182  * @fn      LCD_ProcessEvent
//  183  *
//  184  * @brief   Sensor Application Task event processor.  This function
//  185  *          is called to process all events for the task.  Events
//  186  *          include timers, messages and any other user defined events.
//  187  *
//  188  * @param   task_id  - The OSAL assigned task ID.
//  189  * @param   events - events to process.  This is a bit map and can
//  190  *                   contain more than one event.
//  191  *
//  192  * @return  none
//  193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 uint16 WirelessMonitorSystem_ProcessEvent( uint8 task_id, uint16 events )
WirelessMonitorSystem_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function WirelessMonitorSystem_ProcessEvent
        CODE
//  195 {
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, LCD_SendOneMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, LCD_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, LCD_Loading
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, LCD_SendTopoInformation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  196   afIncomingMSGPacket_t *MSGpkt;
//  197   afDataConfirm_t *afDataConfirm;
//  198 
//  199   // Data Confirmation message fields
//  200   byte sentEP;
//  201   ZStatus_t sentStatus;
//  202   byte sentTransID;       // This should match the value sent
//  203   (void)task_id;  		  // Intentionally unreferenced parameter
//  204 
//  205   if ( events & SYS_EVENT_MSG )
        MOV     A,?V0 + 0
        ANL     A,#0x0
        MOV     R0,A
        MOV     A,?V0 + 1
        ANL     A,#0x80
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??WirelessMonitorSystem_ProcessEvent_0 & 0xFFFF
//  206   {
//  207     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( LCD_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#LCD_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
//  208     while ( MSGpkt )
??WirelessMonitorSystem_ProcessEvent_1:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??WirelessMonitorSystem_ProcessEvent_2 & 0xFFFF
//  209     {
//  210       switch ( MSGpkt->hdr.event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??WirelessMonitorSystem_ProcessEvent_3
        ADD     A,#0x49
        JZ      ??WirelessMonitorSystem_ProcessEvent_4
        ADD     A,#-0x2c
        JNZ     ??WirelessMonitorSystem_ProcessEvent_5
//  211       {
//  212 
//  213         case AF_DATA_CONFIRM_CMD:
//  214           afDataConfirm = (afDataConfirm_t *)MSGpkt;
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
//  215           sentEP = afDataConfirm->endpoint;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  216           sentStatus = afDataConfirm->hdr.status;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  217           sentTransID = afDataConfirm->transID;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  218           (void)sentEP;
//  219           (void)sentTransID;
//  220 
//  221           // Action taken when confirmation is received.
//  222           if ( sentStatus == ZSuccess )
        MOV     A,?V0 + 6
        JNZ     ??WirelessMonitorSystem_ProcessEvent_5
//  223           {
//  224 			// here when the ack send, just send the message to the lcd
//  225 			// send one message
//  226 	  		LCD_SendOneMessage();
        ; Setup parameters for call to function LCD_SendOneMessage
        LCALL   ??LCD_SendOneMessage?relay
//  227 		  }
//  228           break;
        SJMP    ??WirelessMonitorSystem_ProcessEvent_5
//  229 
//  230         case AF_INCOMING_MSG_CMD:
//  231           LCD_MessageMSGCB( MSGpkt );
??WirelessMonitorSystem_ProcessEvent_3:
        ; Setup parameters for call to function LCD_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??LCD_MessageMSGCB?relay
//  232           break;
        SJMP    ??WirelessMonitorSystem_ProcessEvent_5
//  233 
//  234         case ZDO_STATE_CHANGE:
//  235           LCD_NwkState = (devStates_t)(MSGpkt->hdr.status);
??WirelessMonitorSystem_ProcessEvent_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#LCD_NwkState
        MOVX    @DPTR,A
//  236           if ( (LCD_NwkState == DEV_ZB_COORD)
//  237               || (LCD_NwkState == DEV_ROUTER)
//  238               || (LCD_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#LCD_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??WirelessMonitorSystem_ProcessEvent_6
        MOV     DPTR,#LCD_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??WirelessMonitorSystem_ProcessEvent_6
        MOV     DPTR,#LCD_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??WirelessMonitorSystem_ProcessEvent_5
//  239           {
//  240 			  // initialize the  LCD 
//  241 			  LCD_Loading();
??WirelessMonitorSystem_ProcessEvent_6:
        ; Setup parameters for call to function LCD_Loading
        LCALL   ??LCD_Loading?relay
//  242 			  // send topology information
//  243 			  LCD_SendTopoInformation();
        ; Setup parameters for call to function LCD_SendTopoInformation
        LCALL   ??LCD_SendTopoInformation?relay
//  244           }
//  245           break;
//  246 
//  247         default:
//  248           break;
//  249       }
//  250 
//  251       // Release the memory
//  252       osal_msg_deallocate( (uint8 *)MSGpkt );
??WirelessMonitorSystem_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
        MOV     A,R1
//  253 
//  254       // Next
//  255       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( LCD_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#LCD_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
        LJMP    ??WirelessMonitorSystem_ProcessEvent_1 & 0xFFFF
//  256     }
//  257 
//  258     // return unprocessed events
//  259     return (events ^ SYS_EVENT_MSG);
??WirelessMonitorSystem_ProcessEvent_2:
        MOV     A,?V0 + 0
        XRL     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??WirelessMonitorSystem_ProcessEvent_7
//  260   }
//  261 
//  262   // Discard unknown events
//  263   return 0;
??WirelessMonitorSystem_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??WirelessMonitorSystem_ProcessEvent_7:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  264 }
//  265 
//  266 /*********************************************************************
//  267  * LOCAL FUNCTIONS
//  268  */
//  269 
//  270 /*********************************************************************
//  271  * @fn      LCD_MessageMSGCB
//  272  *
//  273  * @brief   Data message processor callback.  This function processes
//  274  *          any incoming data - probably from other devices.  So, based
//  275  *          on cluster ID, perform the intended action.
//  276  *
//  277  * @param   none
//  278  *
//  279  * @return  none
//  280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  281 static void LCD_MessageMSGCB( afIncomingMSGPacket_t *pkt )
LCD_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function LCD_MessageMSGCB
        CODE
//  282 {
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_RoomPlate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_SendRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_BuildScreenFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_MessageMSGCB, LCD_SendTopoInformation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  283 	  // record the params
//  284 	  byte* gbk = pkt->cmd.Data;
        MOV     A,?V0 + 0
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  285 	  byte  len = pkt->cmd.DataLength;
        MOV     A,?V0 + 0
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
//  286 	  // According to the clusterID
//  287 	  switch( pkt->clusterId )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for LCD_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_MessageMSGCB_7
        CODE
//  288 	  {
//  289 		// write subject information
//  290 		case LCD_SUBJECT_CMD:
//  291 		    // set the bit 1
//  292 		  	ackFlag += 2;
??LCD_MessageMSGCB_1:
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOVX    @DPTR,A
//  293 			LCD_BuildScreenFrame(gbk, len, courseReg);
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#courseReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  294 		break;
        LJMP    ??LCD_MessageMSGCB_0 & 0xFFFF
//  295 		
//  296 		// write class information
//  297 		case LCD_CLASS_CMD:
//  298 		  	// this is the index of 0, so set the bit 0 to 1
//  299 		    ackFlag += 1;
??LCD_MessageMSGCB_2:
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  300 			// send the data to the LCD
//  301 			LCD_BuildScreenFrame(gbk, len, classReg);
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#classReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  302 		break;
        LJMP    ??LCD_MessageMSGCB_0 & 0xFFFF
//  303 		
//  304 		// write teacher information
//  305 		case LCD_TEACHER_CMD:
//  306 		    // set the bit 2
//  307 		    ackFlag += 4;
??LCD_MessageMSGCB_3:
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOVX    @DPTR,A
//  308 			LCD_BuildScreenFrame(gbk, len, teacherReg);  
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#teacherReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  309 		break;
        SJMP    ??LCD_MessageMSGCB_0
//  310 		
//  311 		// write people number information
//  312 		case LCD_PEOPLE_CMD:
//  313 		    // set the bit 3
//  314 		    ackFlag += 8;
??LCD_MessageMSGCB_4:
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOVX    @DPTR,A
//  315 			LCD_BuildScreenFrame(gbk, len, peopleReg);
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#peopleReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  316 		break;
        SJMP    ??LCD_MessageMSGCB_0
//  317 		
//  318 		// write time duration infor
//  319 		case LCD_TIME_CMD:
//  320 		  	// set the bit 4
//  321 		  	ackFlag += 16;
??LCD_MessageMSGCB_5:
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        ADD     A,#0x10
        MOVX    @DPTR,A
//  322 			ackFlag |= 0x20;
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  323 			LCD_BuildScreenFrame(gbk, len, timeReg);
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#timeReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  324 			// send the ack here
//  325 	  		LCD_SendACK(ackFlag);
        ; Setup parameters for call to function LCD_SendACK
        MOV     DPTR,#ackFlag
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_SendACK?relay
//  326 			// send one message
//  327 	  		//LCD_SendOneMessage();
//  328 			// reset to zero
//  329 			ackFlag = 0;
        MOV     DPTR,#ackFlag
        MOV     A,#0x0
        MOVX    @DPTR,A
//  330 		break;
        SJMP    ??LCD_MessageMSGCB_0
//  331 		
//  332 		// here write the room number
//  333 		case ROOM_CMD:
//  334 			// here shift to the plate
//  335 		  	if(0 == shiftToRoomInformation){
??LCD_MessageMSGCB_7:
        MOV     DPTR,#shiftToRoomInformation
        MOVX    A,@DPTR
        JNZ     ??LCD_MessageMSGCB_8
//  336 			  	// shift to the room
//  337 				LCD_RoomPlate();
        ; Setup parameters for call to function LCD_RoomPlate
        LCALL   ??LCD_RoomPlate?relay
//  338 				// send retry
//  339 				LCD_SendRetry();
        ; Setup parameters for call to function LCD_SendRetry
        LCALL   ??LCD_SendRetry?relay
//  340 				// set the room state
//  341 				shiftToRoomInformation = 1;
        MOV     DPTR,#shiftToRoomInformation
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??LCD_MessageMSGCB_0
//  342 		  	}else{
//  343 				// set the number
//  344 				LCD_BuildScreenFrame(gbk, len, roomReg);
??LCD_MessageMSGCB_8:
        ; Setup parameters for call to function LCD_BuildScreenFrame
        MOV     DPTR,#roomReg
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_BuildScreenFrame?relay
//  345 				// send the ack here
//  346 	  			LCD_SendACK(0x3F);
        ; Setup parameters for call to function LCD_SendACK
        MOV     R1,#0x3f
        LCALL   ??LCD_SendACK?relay
//  347 				// send one message
//  348 	  			//LCD_SendOneMessage();
//  349 				ackFlag = 0;
        MOV     DPTR,#ackFlag
        MOV     A,#0x0
        MOVX    @DPTR,A
//  350 			}
//  351 		break;
        SJMP    ??LCD_MessageMSGCB_0
//  352 		
//  353 		// send the topology information
//  354 		case TOPO_REQ:
//  355 			// send the topology 
//  356 			LCD_SendTopoInformation();
??LCD_MessageMSGCB_6:
        ; Setup parameters for call to function LCD_SendTopoInformation
        LCALL   ??LCD_SendTopoInformation?relay
//  357 		break;
//  358 	  }// end switch
//  359 }
??LCD_MessageMSGCB_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  360 
//  361 /*******************************************************
//  362 	build screen uart frame
//  363 *******************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  364 static void LCD_BuildScreenFrame(uint8* gbk, uint8 len, uint16 reg){
LCD_BuildScreenFrame:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function LCD_BuildScreenFrame
        CODE
        FUNCALL LCD_BuildScreenFrame, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_BuildScreenFrame, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_BuildScreenFrame, LCD_PushMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_BuildScreenFrame, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  365   // new byte array
//  366   byte* frame = (byte*)osal_mem_alloc(len+6);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 4,?V0 + 7
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  367   // set uart header
//  368   frame[0] = 0xE5;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x1b
        MOVX    @DPTR,A
//  369   frame[1] = 0xE5;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,#-0x1b
        MOVX    @DPTR,A
//  370   // set len
//  371   frame[2] = 3 + len;
        MOV     A,#0x3
        ADD     A,?V0 + 7
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  372   // set wirte reg command
//  373   frame[3] = 0x82;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x7e
        MOVX    @DPTR,A
//  374   // set reg address
//  375   frame[4] = HI_UINT16(reg);
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        CLR     A
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     A,?V0 + 3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  376   frame[5] = LO_UINT16(reg);
        MOV     A,?V0 + 2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  377   // copy data
//  378   osal_memcpy(&frame[6], gbk, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 4,?V0 + 7
        MOV     ?V0 + 5,#0x0
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  379   // add to the message array
//  380   LCD_PushMessage(frame, len+6);
        ; Setup parameters for call to function LCD_PushMessage
        MOV     A,#0x6
        ADD     A,?V0 + 7
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??LCD_PushMessage?relay
//  381   // free 
//  382   osal_mem_free((byte*)frame);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  383 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  384 
//  385 /*******************************************************
//  386 		show the loading screen
//  387 *******************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  388 static void LCD_Loading(){
LCD_Loading:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function LCD_Loading
        CODE
        FUNCALL LCD_Loading, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 7, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 7, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 7)
//  389   // here just shift the screen to the 1
//  390   byte shift[] = {0xE5, 0xE5, 0x04, 0x80, 0x03, 0x00, 0x01};
        MOV     DPTR,#`?<Constant {229, 229, 4, 128, 3, 0, 1}>`
        PUSH    DPL
        CFI CFA_SP SP+-6
        PUSH    DPH
        CFI CFA_SP SP+-7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-6
        POP     DPL
        CFI CFA_SP SP+-5
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  391   // write this to the usart
//  392   HalUARTWrite(UART_PORT, shift, 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  393 }
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  394 
//  395 /******************************************************
//  396 		show the room
//  397 ******************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  398 static void LCD_RoomPlate(){
LCD_RoomPlate:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function LCD_RoomPlate
        CODE
        FUNCALL LCD_RoomPlate, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 7, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 7, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 7)
//  399   // shift to the six screen
//  400   byte shift[] = {0xE5, 0xE5, 0x04, 0x80, 0x03, 0x00, 0x06};
        MOV     DPTR,#`?<Constant {229, 229, 4, 128, 3, 0, 6}>`
        PUSH    DPL
        CFI CFA_SP SP+-6
        PUSH    DPH
        CFI CFA_SP SP+-7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-6
        POP     DPL
        CFI CFA_SP SP+-5
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  401   // write to the uart
//  402   HalUARTWrite(UART_PORT, shift, 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  403 }
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  404 
//  405 /*********************************************************************
//  406  *
//  407  * @fn		LCD_UartInit
//  408  *
//  409  * @brief	this method init the usart for the coordinator
//  410  *
//  411  *
//  412  * @param   None
//  413  *
//  414  * @return  void
//  415  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  416 static void LCD_UartInit()
LCD_UartInit:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function LCD_UartInit
        CODE
//  417 {
        FUNCALL LCD_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  418   // create the uart structure
//  419   halUARTCfg_t uartConfig;
//  420   // set the parameters
//  421   uartConfig.configured           = TRUE;               
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  422   uartConfig.baudRate             = HAL_UART_BR_115200;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  423   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  424   uartConfig.flowControlThreshold = 64;   				
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  425   uartConfig.rx.maxBufSize        = 128;  				
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  426   uartConfig.tx.maxBufSize        = 128;  				
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  427   uartConfig.idleTimeout          = 6;    				
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  428   uartConfig.intEnable            = TRUE;               
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  429   uartConfig.callBackFunc         = LCD_UartCallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??LCD_UartCallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??LCD_UartCallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  430   // open it
//  431   HalUARTOpen (UART_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
        MOV     A,R1
//  432 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  433 
//  434 /*********************************************************************
//  435  *
//  436  * @fn		LCD_SendTopoInfo
//  437  *
//  438  *
//  439  *
//  440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 static void LCD_SendTopoInformation()
LCD_SendTopoInformation:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function LCD_SendTopoInformation
        CODE
//  442 { 
        FUNCALL LCD_SendTopoInformation, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendTopoInformation, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendTopoInformation, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendTopoInformation, copyExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendTopoInformation, LCD_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendTopoInformation, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  443   // Define the Frame
//  444   unsigned char* srcExtAddr;
//  445   srcExtAddr = NLME_GetExtAddr();
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  446   uint16 srcAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  447   uint16 parAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  448   byte frame[19] = {0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x13
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  449   
//  450   // Build the Frame
//  451   // Fill SOF	0xFE
//  452   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  453   // Fill len
//  454   frame[1] = 12;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xc
        MOVX    @DPTR,A
//  455   // Fill CMD
//  456   frame[2] = LO_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  457   frame[3] = HI_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  458   // Fill Addr
//  459   frame[4] = LO_UINT16(srcAddr);
        MOV     A,?V0 + 0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  460   frame[5] = HI_UINT16(srcAddr);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        CLR     A
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     A,?V0 + 1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  461   // fill type
//  462   frame[6] = LO_UINT16(LCD);
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  463   frame[7] = HI_UINT16(LCD);
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  464   // Fill Parent
//  465   frame[8] = LO_UINT16(parAddr);
        MOV     A,R6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  466   frame[9] = HI_UINT16(parAddr);
        MOV     A,R6
        MOV     R0,A
        MOV     A,?V0 + 5
        MOV     R1,?V0 + 5
        CLR     A
        MOV     A,?V0 + 5
        MOV     R0,?V0 + 5
        MOV     A,?V0 + 5
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  467   // fill the ieee64 address
//  468   copyExtAddr(srcExtAddr, (byte*)&frame[10]); 
        ; Setup parameters for call to function copyExtAddr
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??copyExtAddr?relay
//  469   // Cal and fill FCS
//  470   frame[18] = LCD_CalcFCS((byte*)&frame[1], 17);
        ; Setup parameters for call to function LCD_CalcFCS
        MOV     R1,#0x11
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??LCD_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  471   
//  472   // Send the data to Coordinator
//  473   AF_DataRequest( &LCD_DstAddr, 
//  474 				  &LCD_epDesc,
//  475 				  ZIGBEE_COMMON_CLUSTER,
//  476 				  19,
//  477 				  (byte *)frame,
//  478 				  &LCD_TransID,
//  479 				  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 4,#0x1e
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,#LCD_TransID & 0xff
        MOV     ?V0 + 5,#(LCD_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 4,#0x13
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 4,#0xb
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R1,#0x20
        MOV     R4,#LCD_epDesc & 0xff
        MOV     R5,#(LCD_epDesc >> 8) & 0xff
        MOV     R2,#LCD_DstAddr & 0xff
        MOV     R3,#(LCD_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
//  480 }
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  481 
//  482 /*********************************************************************
//  483  *
//  484  * @fn		LCD_UartCallBack
//  485  *
//  486  * @brief	this method deal with the uart event
//  487  *
//  488  *
//  489  * @param   port  -- uart port
//  490  *			event -- event occur
//  491  *
//  492  * @return  void
//  493  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  494 static void LCD_UartCallBack( uint8 port, uint8 event )
LCD_UartCallBack:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function LCD_UartCallBack
        CODE
//  495 {
        FUNCALL LCD_UartCallBack, LCD_IsMessageEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_UartCallBack, LCD_SendOneMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  496   (void)port;
//  497 
//  498   // if Tx interrupt has occur
//  499   if (event & HAL_UART_TX_EMPTY)
        MOV     C,0xE0 /* A   */.4
        JNC     ??LCD_UartCallBack_0
//  500   {
//  501 	// hava message in the queue
//  502 	if(LCD_IsMessageEmpty() == 0x00){
        ; Setup parameters for call to function LCD_IsMessageEmpty
        LCALL   ??LCD_IsMessageEmpty?relay
        MOV     A,R1
        JNZ     ??LCD_UartCallBack_0
//  503 	  // send another message
//  504 	  LCD_SendOneMessage();
        ; Setup parameters for call to function LCD_SendOneMessage
        LCALL   ??LCD_SendOneMessage?relay
//  505 	}
//  506   }
//  507 }
??LCD_UartCallBack_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  508 /**************************************************************
//  509 		send the ack command to the monitor 
//  510 **************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  511 static void LCD_SendACK(byte flag){
LCD_SendACK:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function LCD_SendACK
        CODE
        FUNCALL LCD_SendACK, LCD_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendACK, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        MOV     R6,A
//  512   // new the frame
//  513   byte frame[8] = {0};
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  514   // fill the header
//  515   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  516   // fill the length
//  517   frame[1] = 1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  518   // fill the command
//  519   frame[2] = LO_UINT16(LCD_ACK_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  520   frame[3] = HI_UINT16(LCD_ACK_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  521   // fill Addr
//  522   frame[4] = LO_UINT16(0);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  523   frame[5] = HI_UINT16(0);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  524   // fill the flag
//  525   frame[6] = flag;
        MOV     A,R6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  526   // fill the fcs
//  527   frame[7] = LCD_CalcFCS((byte*)&frame[1], 6);
        ; Setup parameters for call to function LCD_CalcFCS
        MOV     R1,#0x6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??LCD_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  528   
//  529   // Send the data to Coordinator
//  530   AF_DataRequest( &LCD_DstAddr, 
//  531 				  &LCD_epDesc,
//  532 				  ZIGBEE_COMMON_CLUSTER,
//  533 				  8,
//  534 				  (byte *)frame,
//  535 				  &LCD_TransID,
//  536 				  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#LCD_TransID & 0xff
        MOV     ?V0 + 1,#(LCD_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R1,#0x20
        MOV     R4,#LCD_epDesc & 0xff
        MOV     R5,#(LCD_epDesc >> 8) & 0xff
        MOV     R2,#LCD_DstAddr & 0xff
        MOV     R3,#(LCD_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
//  537 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  538 
//  539 /***********************************************************
//  540 	LCD send retry
//  541 ***********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  542 static void LCD_SendRetry(){
LCD_SendRetry:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function LCD_SendRetry
        CODE
        FUNCALL LCD_SendRetry, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendRetry, LCD_CalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendRetry, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  543   // first get the short address
//  544   uint16 srcAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  545   // new the frame
//  546   byte frame[7] = {0};
        MOV     DPTR,#`?<Constant {0}>_2`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  547   // fill the header
//  548   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  549   // fill the length
//  550   frame[1] = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  551   // fill the command
//  552   frame[2] = LO_UINT16(LCD_RETRY_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  553   frame[3] = HI_UINT16(LCD_RETRY_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  554   // fill Addr
//  555   frame[4] = LO_UINT16(srcAddr);
        MOV     A,R6
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  556   frame[5] = HI_UINT16(srcAddr);
        MOV     A,R6
        MOV     R0,A
        MOV     A,?V0 + 1
        MOV     R1,?V0 + 1
        CLR     A
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     A,?V0 + 1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  557   // fill the fcs
//  558   frame[6] = LCD_CalcFCS((byte*)&frame[1], 5);
        ; Setup parameters for call to function LCD_CalcFCS
        MOV     R1,#0x5
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??LCD_CalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  559   
//  560   // Send the data to Coordinator
//  561   AF_DataRequest( &LCD_DstAddr, 
//  562 				  &LCD_epDesc,
//  563 				  ZIGBEE_COMMON_CLUSTER,
//  564 				  7,
//  565 				  (byte *)frame,
//  566 				  &LCD_TransID,
//  567 				  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#LCD_TransID & 0xff
        MOV     ?V0 + 1,#(LCD_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R1,#0x20
        MOV     R4,#LCD_epDesc & 0xff
        MOV     R5,#(LCD_epDesc >> 8) & 0xff
        MOV     R2,#LCD_DstAddr & 0xff
        MOV     R3,#(LCD_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
//  568 }
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10
//  569 
//  570 /*********************************************************************
//  571  * @fn      LCD_CalcFCS
//  572  *
//  573  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  574  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  575  *
//  576  * @param   byte *msg_ptr - message pointer
//  577  * @param   byte len - length (in bytes) of message
//  578  *
//  579  * @return  result byte
//  580  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  581 static byte LCD_CalcFCS( uint8 *msg_ptr, uint8 len )
LCD_CalcFCS:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function LCD_CalcFCS
        CODE
//  582 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  583   byte x;
//  584   byte xorResult = 0x00;
        MOV     R1,#0x0
//  585 
//  586   for ( x=0; x<len; x++ )
        MOV     R0,#0x0
??LCD_CalcFCS_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JNC     ??LCD_CalcFCS_1
//  587     xorResult ^=  msg_ptr[x];
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
        SJMP    ??LCD_CalcFCS_0
//  588 
//  589   return ( xorResult );
??LCD_CalcFCS_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  590 }
//  591 
//  592 /**************************************
//  593 	save extern address in array
//  594 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  595 static void copyExtAddr(byte* src, byte* dst){
copyExtAddr:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function copyExtAddr
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  596 	// here LSB goes first
//  597   	int i = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  598 	while(i < 8){
??copyExtAddr_0:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x8
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??copyExtAddr_1
//  599 	  dst[i] = src[i];
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  600 	  // update
//  601 	  i++;
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??copyExtAddr_0
//  602 	}
//  603 }
??copyExtAddr_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  604 
//  605 /******************************************************
//  606 		Define The Queue
//  607 ******************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  608 static void LCD_InitMessageQueue( ){
LCD_InitMessageQueue:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function LCD_InitMessageQueue
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  609   // only set the pHeader and the pTail
//  610   pHeader = 0;
        MOV     DPTR,#pHeader
        MOV     A,#0x0
        MOVX    @DPTR,A
//  611   pTail = 0;
        MOV     DPTR,#pTail
        MOV     A,#0x0
        MOVX    @DPTR,A
//  612 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
//  613 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  614 static void LCD_PushMessage( byte* str, byte len ){
LCD_PushMessage:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function LCD_PushMessage
        CODE
        FUNCALL LCD_PushMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 3,R1
//  615   // check first
//  616   if( pTail > 11 ){
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xc
        JNC     ??LCD_PushMessage_0
//  617 	return;
//  618   }
//  619   // copy the data to the pTail
//  620   osal_memcpy(messageArray[pTail].data, (byte*)str, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,?V0 + 3
        MOV     ?V0 + 1,#0x0
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#messageArray & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(messageArray >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  621   messageArray[pTail].len = len;
        MOV     A,?V0 + 3
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 64) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 64) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  622   // then increase the tail
//  623   pTail++; 
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  624 }
??LCD_PushMessage_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14
//  625 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  626 static MessageNode* LCD_PopMessage( ){
LCD_PopMessage:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function LCD_PopMessage
        CODE
        FUNCALL LCD_PopMessage, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_PopMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_PopMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  627   // if the message array is null just return 
//  628   if(0 == pTail){
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        JNZ     ??LCD_PopMessage_0
//  629 	return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??LCD_PopMessage_1 & 0xFFFF
//  630   }
//  631   // counter
//  632   byte i = 0;
??LCD_PopMessage_0:
        MOV     ?V0 + 3,#0x0
//  633   // get the header
//  634   MessageNode* returnNode = osal_mem_alloc(sizeof(MessageNode));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  635   // get node
//  636   osal_memcpy(returnNode->data, messageArray[pHeader].data, messageArray[pHeader].len);
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#pHeader
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#messageArray & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(messageArray >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#pHeader
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 64) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 64) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  637   returnNode->len = messageArray[pHeader].len;
        MOV     DPTR,#pHeader
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 64) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 64) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x40
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  638   // shift data forward
//  639   for(i=0; i<=pTail-1; i++){
        MOV     ?V0 + 3,#0x0
??LCD_PopMessage_2:
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     ?V0 + 0,?V0 + 3
        MOV     ?V0 + 1,#0x0
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 0
        MOV     A,R1
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??LCD_PopMessage_3 & 0xFFFF
//  640 	osal_memcpy(messageArray[i].data, messageArray[i+1].data, messageArray[i+1].len);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 65) & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#((messageArray + 65) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 129) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 129) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#messageArray & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(messageArray >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  641 	// set the len
//  642 	messageArray[i].len = messageArray[i+1].len;
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 129) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 129) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 3
        MOV     R0,?V0 + 3
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x41
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x41
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(messageArray + 64) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((messageArray + 64) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  643   }
        INC     ?V0 + 3
        LJMP    ??LCD_PopMessage_2 & 0xFFFF
//  644   // and now pTail is refered to a null node
//  645   // just use to save new data
//  646   pTail--;
??LCD_PopMessage_3:
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
//  647   pHeader=0;
        MOV     DPTR,#pHeader
        MOV     A,#0x0
        MOVX    @DPTR,A
//  648   
//  649   // return
//  650   return returnNode;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??LCD_PopMessage_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  651 }
//  652 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  653 static byte LCD_IsMessageEmpty( ){
LCD_IsMessageEmpty:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function LCD_IsMessageEmpty
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  654   if(pHeader == pTail){
        MOV     DPTR,#pHeader
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#pTail
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??LCD_IsMessageEmpty_0
//  655 	return 0x01;
        MOV     R1,#0x1
        SJMP    ??LCD_IsMessageEmpty_1
//  656   }else{
//  657 	return 0x00;
??LCD_IsMessageEmpty_0:
        MOV     R1,#0x0
??LCD_IsMessageEmpty_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock16
//  658   }
//  659 }
//  660 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  661 static void LCD_SendOneMessage( ){
LCD_SendOneMessage:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function LCD_SendOneMessage
        CODE
        FUNCALL LCD_SendOneMessage, LCD_IsMessageEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendOneMessage, LCD_PopMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendOneMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SendOneMessage, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  662   // just return
//  663   if(LCD_IsMessageEmpty() == 0x01){
        ; Setup parameters for call to function LCD_IsMessageEmpty
        LCALL   ??LCD_IsMessageEmpty?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??LCD_SendOneMessage_0
//  664 	return;
//  665   }	
//  666   // pop a message from the message array
//  667   MessageNode* item = LCD_PopMessage();
        ; Setup parameters for call to function LCD_PopMessage
        LCALL   ??LCD_PopMessage?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  668   // send
//  669   HalUARTWrite(UART_PORT, item->data, item->len);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x40
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  670   // free it after send
//  671   osal_mem_free((MessageNode*)item);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  672 }
??LCD_SendOneMessage_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_BuildScreenFrame?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_BuildScreenFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Loading?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Loading

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_RoomPlate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_RoomPlate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SendTopoInformation?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SendTopoInformation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_UartCallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_UartCallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SendRetry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SendRetry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_CalcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_CalcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??copyExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    copyExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_InitMessageQueue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_InitMessageQueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_PushMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_PushMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_PopMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_PopMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_IsMessageEmpty?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_IsMessageEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SendOneMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SendOneMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {229, 229, 4, 128, 3, 0, 1}>`:
        DB 229
        DB 229
        DB 4
        DB 128
        DB 3
        DB 0
        DB 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {229, 229, 4, 128, 3, 0, 6}>`:
        DB 229
        DB 229
        DB 4
        DB 128
        DB 3
        DB 0
        DB 6

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0

        END
//  673 /*******************************************************************************
//  674 *******************************************************************************/
// 
// 2 655 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//    88 bytes in segment XDATA_ROM_C
//   805 bytes in segment XDATA_Z
// 
// 2 763 bytes of CODE  memory
//    88 bytes of CONST memory
//   805 bytes of XDATA memory
//
//Errors: none
//Warnings: none

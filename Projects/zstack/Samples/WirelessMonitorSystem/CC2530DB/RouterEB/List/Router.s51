///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        31/May/2015  21:39:32 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\Source\Rou /
//                          ter.c                                             /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\T /
//                          ools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO         /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=500        /
//                          -DQUEUED_POLL_RATE=30 -DRESPONSE_POLL_RATE=100)   /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\Source\Router.c"    /
//                          -D NWK_MAX_DEVICE_LIST=3 -lC "C:\Texas            /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\RouterEB\L /
//                          ist\" -lA "C:\Texas Instruments\ZStack-CC2530-2.5 /
//                          .1a\Projects\zstack\Samples\WirelessMonitorSystem /
//                          \CC2530DB\RouterEB\List\" --diag_suppress         /
//                          Pe001,Pa010 -o "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\RouterEB\O /
//                          bj\" -e --no_code_motion --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\" -I       /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\Source\" -I "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\Z /
//                          Main\TI2530DB\" -I "C:\Texas                      /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\include\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\hal\target\CC2530EB\" -I          /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\include\" -I        /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\WirelessMonitorSystem\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\low_level\srf04\"   /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\WirelessMonitorSystem\CC2530 /
//                          DB\..\..\..\..\..\Components\mac\low_level\srf04\ /
//                          single_chip\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\mt\" -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\osal\include\" -I "C:\Texas       /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\saddr\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\services\sdata\" -I "C:\Texas     /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\af\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\nwk\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sapi\" -I "C:\Texas         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sec\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\sys\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\stack\zdo\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\" -I "C:\Texas               /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\WirelessMonitorSystem\CC2530DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\" -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\WirelessMonitorSystem\CC2530DB\R /
//                          outerEB\List\Router.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Router

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Router_SendTopologyInformation?relay,0203H
        PUBLIC ??WirelessMonitorSystem_Init?relay
        FUNCTION ??WirelessMonitorSystem_Init?relay,0203H
        PUBLIC ??WirelessMonitorSystem_ProcessEvent?relay
        FUNCTION ??WirelessMonitorSystem_ProcessEvent?relay,0203H
        PUBLIC Router_ClusterInList
        PUBLIC Router_ClusterOutList
        PUBLIC Router_DstAddr
        PUBLIC Router_NwkState
        FUNCTION Router_SendTopologyInformation,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC Router_SimpleDesc
        PUBLIC Router_TaskID
        PUBLIC Router_TransID
        PUBLIC Router_epDesc
        PUBLIC WirelessMonitorSystem_Init
        FUNCTION WirelessMonitorSystem_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WirelessMonitorSystem_ProcessEvent
        FUNCTION WirelessMonitorSystem_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
WirelessMonitorSystem_Init SYMBOL "WirelessMonitorSystem_Init"
??WirelessMonitorSystem_Init?relay SYMBOL "?relay", WirelessMonitorSystem_Init
WirelessMonitorSystem_ProcessEvent SYMBOL "WirelessMonitorSystem_ProcessEvent"
??WirelessMonitorSystem_ProcessEvent?relay SYMBOL "?relay", WirelessMonitorSystem_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\WirelessMonitorSystem\Source\Router.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 
//   10 #include "WirelessMonitorSystem.h"
//   11 #include "DebugTrace.h"
//   12 
//   13 #if !defined( WIN32 )
//   14   #include "OnBoard.h"
//   15 #endif
//   16 
//   17 /*********************************************************************
//   18  * MACROS
//   19  */
//   20 
//   21 // Max in / out Cluster number
//   22 #define Router_MAX_IN_CLUSTERS			1
//   23 #define Router_MAX_OUT_CLUSTERS			10
//   24 
//   25 /*********************************************************************
//   26  * GLOBAL VARIABLES
//   27  */
//   28 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   29 const cId_t Router_ClusterInList[Router_MAX_IN_CLUSTERS] =
Router_ClusterInList:
        DW 11
//   30 {
//   31 	ZIGBEE_COMMON_CLUSTER,
//   32 };
//   33 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   34 const cId_t Router_ClusterOutList[Router_MAX_OUT_CLUSTERS] =
Router_ClusterOutList:
        DATA16
        DW 10
        DW 12
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
        DW 13
        DW 14
        DW 15
//   35 {
//   36 	TOPO_REQ,
//   37 	IMAGE_REQ,
//   38 	LCD_SUBJECT_CMD,
//   39 	LCD_CLASS_CMD,
//   40 	LCD_TEACHER_CMD,
//   41 	LCD_PEOPLE_CMD,
//   42 	LCD_TIME_CMD,
//   43 	GRAPHICS_CMD,
//   44 	DATA_ALLOW,
//   45 	DATA_REFUSE
//   46 };
//   47 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   48 const SimpleDescriptionFormat_t Router_SimpleDesc =
Router_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW Router_ClusterInList
        DATA8
        DB 10
        DATA16
        DW Router_ClusterOutList
//   49 {
//   50   Monitor_ENDPOINT,              //  int Endpoint;
//   51   Monitor_PROFID,                //  uint16 AppProfId[2];
//   52   Monitor_DEVICEID,              //  uint16 AppDeviceId[2];
//   53   Monitor_DEVICE_VERSION,        //  int   AppDevVer:4;
//   54   Monitor_FLAGS,                 //  int   AppFlags:4;
//   55   Router_MAX_IN_CLUSTERS,           //  byte  AppNumInClusters;
//   56   (cId_t *)Router_ClusterInList,    //  byte *pAppInClusterList;
//   57   Router_MAX_OUT_CLUSTERS,          //  byte  AppNumOutClusters;
//   58   (cId_t *)Router_ClusterOutList    //  byte *pAppOutClusterList;
//   59 };
//   60 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   61 endPointDesc_t Router_epDesc;
Router_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   62 
//   63 /*********************************************************************
//   64  * EXTERNAL VARIABLES
//   65  */
//   66 
//   67 /*********************************************************************
//   68  * EXTERNAL FUNCTIONS
//   69  */
//   70 
//   71 /*********************************************************************
//   72  * LOCAL VARIABLES
//   73  */
//   74 
//   75 /**************************** OSAL **********************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 byte Router_TaskID;    // Task ID for internal task/event processing
Router_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   77 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 byte Router_TransID;   // This is the unique message ID (counter)
Router_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 devStates_t Router_NwkState;	// record the network state
Router_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   81 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 afAddrType_t Router_DstAddr;	// Bind endpoint address
Router_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   83 
//   84 
//   85 /*********************************************************************
//   86  * LOCAL FUNCTIONS
//   87  */
//   88 static void Router_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   89 static void Router_SendTopologyInformation( void );
//   90 static byte Router_CalcFCS( uint8 *msg_ptr, uint8 len );
//   91 
//   92 /*********************************************************************
//   93  * @fn      Router_Init
//   94  *
//   95  * @brief   Initialization function for the Sensor App Task.
//   96  *          This is called during initialization and should contain
//   97  *          any application specific initialization (ie. hardware
//   98  *          initialization/setup, table initialization, power up
//   99  *          notificaiton ... ).
//  100  *
//  101  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  102  *                    used to send messages and set timers.
//  103  *
//  104  * @return  none
//  105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void WirelessMonitorSystem_Init( uint8 task_id )
WirelessMonitorSystem_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function WirelessMonitorSystem_Init
        CODE
//  107 {
        FUNCALL WirelessMonitorSystem_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  108   Router_TaskID = task_id;
        MOV     DPTR,#Router_TaskID
        MOVX    @DPTR,A
//  109   Router_NwkState = DEV_INIT;
        MOV     DPTR,#Router_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  110   Router_TransID = 0;
        MOV     DPTR,#Router_TransID
        CLR     A
        MOVX    @DPTR,A
//  111   
//  112   // Device hardware initialization can be added here or in main() (Zmain.c).
//  113   // If the hardware is application specific - add it here.
//  114   // If the hardware is other parts of the device add it in main().
//  115   Router_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#Router_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  116   Router_DstAddr.endPoint = Monitor_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  117   Router_DstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;	// 0xFFFF
        MOV     DPTR,#Router_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  118 
//  119   // Fill out the endpoint description.
//  120   Router_epDesc.endPoint = Monitor_ENDPOINT;
        MOV     DPTR,#Router_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  121   Router_epDesc.task_id = &Router_TaskID;
        INC     DPTR
        MOV     A,#Router_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Router_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  122   Router_epDesc.simpleDesc
//  123             = (SimpleDescriptionFormat_t *)&Router_SimpleDesc;
        INC     DPTR
        MOV     A,#Router_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Router_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  124   Router_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  125 
//  126   // Register the endpoint description with the AF
//  127   afRegister( &Router_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Router_epDesc & 0xff
        MOV     R3,#(Router_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  128   
//  129 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  130 
//  131 /*********************************************************************
//  132  * @fn      Router_ProcessEvent
//  133  *
//  134  * @brief   Sensor Application Task event processor.  This function
//  135  *          is called to process all events for the task.  Events
//  136  *          include timers, messages and any other user defined events.
//  137  *
//  138  * @param   task_id  - The OSAL assigned task ID.
//  139  * @param   events - events to process.  This is a bit map and can
//  140  *                   contain more than one event.
//  141  *
//  142  * @return  none
//  143  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  144 uint16 WirelessMonitorSystem_ProcessEvent( uint8 task_id, uint16 events )
WirelessMonitorSystem_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function WirelessMonitorSystem_ProcessEvent
        CODE
//  145 {
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, Router_SendTopologyInformation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WirelessMonitorSystem_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  146   afIncomingMSGPacket_t *MSGpkt;
//  147   afDataConfirm_t *afDataConfirm;
//  148 
//  149   // Data Confirmation message fields
//  150   byte sentEP;
//  151   ZStatus_t sentStatus;
//  152   byte sentTransID;       // This should match the value sent
//  153   (void)task_id;  		  // Intentionally unreferenced parameter
//  154 
//  155   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??WirelessMonitorSystem_ProcessEvent_0
//  156   {
//  157     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Router_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??WirelessMonitorSystem_ProcessEvent_1
//  158     while ( MSGpkt )
//  159     {
//  160       switch ( MSGpkt->hdr.event )
//  161       {
//  162         case AF_DATA_CONFIRM_CMD:
//  163           // This message is received as a confirmation of a data packet sent.
//  164           // The status is of ZStatus_t type [defined in ZComDef.h]
//  165           // The message fields are defined in AF.h
//  166           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  167           sentEP = afDataConfirm->endpoint;
//  168           sentStatus = afDataConfirm->hdr.status;
//  169           sentTransID = afDataConfirm->transID;
//  170           (void)sentEP;
//  171           (void)sentTransID;
//  172 
//  173 		  if( sentStatus == ZSuccess )
//  174 		  {
//  175 			// success do something here
//  176 		  } 
//  177           break;
//  178 
//  179         case AF_INCOMING_MSG_CMD:
//  180           Router_MessageMSGCB( MSGpkt );
//  181           break;
//  182 
//  183         case ZDO_STATE_CHANGE:
//  184           Router_NwkState = (devStates_t)(MSGpkt->hdr.status);
??WirelessMonitorSystem_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Router_NwkState
        MOVX    @DPTR,A
//  185           if ( (Router_NwkState == DEV_ZB_COORD)
//  186               || (Router_NwkState == DEV_ROUTER)
//  187               || (Router_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??WirelessMonitorSystem_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??WirelessMonitorSystem_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??WirelessMonitorSystem_ProcessEvent_4
//  188           { 
//  189 			// send the topology information
//  190 			Router_SendTopologyInformation();
??WirelessMonitorSystem_ProcessEvent_3:
        ; Setup parameters for call to function Router_SendTopologyInformation
        LCALL   ??Router_SendTopologyInformation?relay
//  191           }
//  192           break;
//  193       }
//  194 
//  195       // Release the memory
//  196       osal_msg_deallocate( (uint8 *)MSGpkt );
??WirelessMonitorSystem_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  197 
//  198       // Next
//  199       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Router_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??WirelessMonitorSystem_ProcessEvent_1:
        MOV     DPTR,#Router_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??WirelessMonitorSystem_ProcessEvent_5
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??WirelessMonitorSystem_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??WirelessMonitorSystem_ProcessEvent_2
        SJMP    ??WirelessMonitorSystem_ProcessEvent_4
??WirelessMonitorSystem_ProcessEvent_6:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??WirelessMonitorSystem_ProcessEvent_7
        INC     DPTR
        MOVX    A,@DPTR
??WirelessMonitorSystem_ProcessEvent_7:
        JNZ     ??WirelessMonitorSystem_ProcessEvent_4
        SJMP    ??WirelessMonitorSystem_ProcessEvent_3
//  200     }
//  201 	
//  202     // return unprocessed events
//  203     return (events ^ SYS_EVENT_MSG);
??WirelessMonitorSystem_ProcessEvent_5:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??WirelessMonitorSystem_ProcessEvent_8
//  204   }
//  205   
//  206   // Discard unknown events
//  207   return 0;
??WirelessMonitorSystem_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??WirelessMonitorSystem_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  208 }
//  209 
//  210 /*********************************************************************
//  211  * LOCAL FUNCTIONS
//  212  */
//  213 
//  214 /*********************************************************************
//  215  * @fn      Router_MessageMSGCB
//  216  *
//  217  * @brief   Data message processor callback.  This function processes
//  218  *          any incoming data - probably from other devices.  So, based
//  219  *          on cluster ID, perform the intended action.
//  220  *
//  221  * @param   none
//  222  *
//  223  * @return  none
//  224  */
//  225 void Router_MessageMSGCB( afIncomingMSGPacket_t *pkt )
//  226 {
//  227   // According to the clusterID
//  228   switch( pkt->clusterId )
//  229   {
//  230 	// send the topology information
//  231   	case TOPO_REQ:
//  232       Router_SendTopologyInformation();
//  233     break;
//  234   }
//  235 }
//  236 
//  237 /*********************************************************************
//  238  * @fn      Router_SendTopoInfo
//  239  *
//  240  * @brief   Send the topology information to the coordinator.
//  241  *
//  242  * @param   none
//  243  *
//  244  * @return  none
//  245  *
//  246  *
//  247  *
//  248  * |	SOF		|	LEN		| 	CMD		| 	Addr	|	DATA	| 	FCS		|
//  249  *		1			1			2			2			--			1
//  250  *
//  251  */
//  252 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 void Router_SendTopologyInformation()
Router_SendTopologyInformation:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Router_SendTopologyInformation
        CODE
//  254 {
        FUNCALL Router_SendTopologyInformation, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_SendTopologyInformation, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Router_SendTopologyInformation, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  255   // Define the Frame
//  256   uint16 srcAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  257   uint16 parAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
//  258   byte frame[11] = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  259   
//  260   // Build the Frame
//  261   // Fill SOF	0xFE
//  262   frame[0] = 0xFE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  263   // Fill len
//  264   frame[1] = 4;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  265   // Fill CMD
//  266   frame[2] = LO_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  267   frame[3] = HI_UINT16(TOPOLOGY_CMD);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  268   // Fill Addr
//  269   frame[4] = LO_UINT16(srcAddr);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  270   frame[5] = HI_UINT16(srcAddr);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  271   // Fill type
//  272   frame[6] = LO_UINT16(ROUTER);
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  273   frame[7] = HI_UINT16(ROUTER);
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  274   // Fill parent
//  275   frame[8] = LO_UINT16(parAddr);
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  276   frame[9] = HI_UINT16(parAddr);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  277   // Cal and fill FCS
//  278   frame[10] = Router_CalcFCS((byte*)&frame[1], 9);
        MOV     ?V0 + 2,#0x0
        MOV     R0,#0x0
??Router_SendTopologyInformation_0:
        MOV     ?V0 + 0,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     ?V0 + 2,A
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x9
        JC      ??Router_SendTopologyInformation_0
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  279   
//  280   // Send the data to Coordinator
//  281   AF_DataRequest( &Router_DstAddr, &
//  282 				  Router_epDesc,
//  283                   ZIGBEE_COMMON_CLUSTER,
//  284                   11,
//  285                   (byte *) frame,
//  286                   &Router_TransID,
//  287                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#Router_TransID & 0xff
        MOV     ?V0 + 1,#(Router_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#Router_epDesc & 0xff
        MOV     R5,#(Router_epDesc >> 8) & 0xff
        MOV     R2,#Router_DstAddr & 0xff
        MOV     R3,#(Router_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  288 }
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WirelessMonitorSystem_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WirelessMonitorSystem_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Router_SendTopologyInformation?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Router_SendTopologyInformation

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
//  289 
//  290 /*********************************************************************
//  291  * @fn      Vibrate_CalcFCS
//  292  *
//  293  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  294  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  295  *
//  296  * @param   byte *msg_ptr - message pointer
//  297  * @param   byte len - length (in bytes) of message
//  298  *
//  299  * @return  result byte
//  300  ********************************************************************/
//  301 byte Router_CalcFCS( uint8 *msg_ptr, uint8 len )
//  302 {
//  303   byte x;
//  304   byte xorResult = 0x00;
//  305 
//  306   for ( x=0; x<len; x++ )
//  307     xorResult ^=  msg_ptr[x];
//  308 
//  309   return ( xorResult );
//  310 }
// 
// 431 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//  45 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 449 bytes of CODE  memory
//  45 bytes of CONST memory
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
